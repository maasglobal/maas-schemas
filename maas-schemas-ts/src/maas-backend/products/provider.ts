/*

undefined
MaaS product provider schema

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as Common_ from '../../core/components/common';
import * as Units_ from '../../core/components/units';
import * as Fare_ from '../../core/components/fare';
import * as PersonalDataAllowItem_ from '../../core/components/personalDataAllowItem';
import * as PersonalDataValidation_ from '../../core/components/personalDataValidation';
import * as PersonalDocumentRequiredItem_ from '../../core/components/personalDocumentRequiredItem';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export const schemaId = 'http://maasglobal.com/maas-backend/products/provider.json';

// Selection
// Optional parameter for selections
export type Selection = t.Branded<
  {
    id?: string;
    name?: string;
    type?: 'oneOf' | 'someOf' | 'allOf' | 'oneOrNoneOf' | 'someOrNoneOf';
    userSelectable?: boolean;
    inputs?: Array<
      {
        id?: string;
        name?: string;
        type?: 'string' | 'number' | 'boolean' | 'station';
        default?: string | number | boolean;
      } & {
        id: Defined;
        name: Defined;
        type: Defined;
      }
    >;
  } & {
    id: Defined;
    name: Defined;
    inputs: Defined;
  },
  SelectionBrand
>;
export type SelectionC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        id: t.StringC;
        name: t.StringC;
        type: t.UnionC<
          [
            t.LiteralC<'oneOf'>,
            t.LiteralC<'someOf'>,
            t.LiteralC<'allOf'>,
            t.LiteralC<'oneOrNoneOf'>,
            t.LiteralC<'someOrNoneOf'>,
          ]
        >;
        userSelectable: t.BooleanC;
        inputs: t.ArrayC<
          t.IntersectionC<
            [
              t.PartialC<{
                id: t.StringC;
                name: t.StringC;
                type: t.UnionC<
                  [
                    t.LiteralC<'string'>,
                    t.LiteralC<'number'>,
                    t.LiteralC<'boolean'>,
                    t.LiteralC<'station'>,
                  ]
                >;
                default: t.UnionC<[t.StringC, t.NumberC, t.BooleanC]>;
              }>,
              t.TypeC<{
                id: typeof Defined;
                name: typeof Defined;
                type: typeof Defined;
              }>,
            ]
          >
        >;
      }>,
      t.TypeC<{
        id: typeof Defined;
        name: typeof Defined;
        inputs: typeof Defined;
      }>,
    ]
  >,
  SelectionBrand
>;
export const Selection: SelectionC = t.brand(
  t.intersection([
    t.partial({
      id: t.string,
      name: t.string,
      type: t.union([
        t.literal('oneOf'),
        t.literal('someOf'),
        t.literal('allOf'),
        t.literal('oneOrNoneOf'),
        t.literal('someOrNoneOf'),
      ]),
      userSelectable: t.boolean,
      inputs: t.array(
        t.intersection([
          t.partial({
            id: t.string,
            name: t.string,
            type: t.union([
              t.literal('string'),
              t.literal('number'),
              t.literal('boolean'),
              t.literal('station'),
            ]),
            default: t.union([t.string, t.number, t.boolean]),
          }),
          t.type({
            id: Defined,
            name: Defined,
            type: Defined,
          }),
        ]),
      ),
    }),
    t.type({
      id: Defined,
      name: Defined,
      inputs: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      id?: string;
      name?: string;
      type?: 'oneOf' | 'someOf' | 'allOf' | 'oneOrNoneOf' | 'someOrNoneOf';
      userSelectable?: boolean;
      inputs?: Array<
        {
          id?: string;
          name?: string;
          type?: 'string' | 'number' | 'boolean' | 'station';
          default?: string | number | boolean;
        } & {
          id: Defined;
          name: Defined;
          type: Defined;
        }
      >;
    } & {
      id: Defined;
      name: Defined;
      inputs: Defined;
    },
    SelectionBrand
  > => true,
  'Selection',
);
export interface SelectionBrand {
  readonly Selection: unique symbol;
}

// MessageToDriver
// Optional parameter for a message to driver
export type MessageToDriver = t.Branded<
  {
    message?: {
      property?: string;
      maxLength?: number;
    } & {
      property: Defined;
      maxLength: Defined;
    };
  } & {
    message: Defined;
  },
  MessageToDriverBrand
>;
export type MessageToDriverC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        message: t.IntersectionC<
          [
            t.PartialC<{
              property: t.StringC;
              maxLength: t.NumberC;
            }>,
            t.TypeC<{
              property: typeof Defined;
              maxLength: typeof Defined;
            }>,
          ]
        >;
      }>,
      t.TypeC<{
        message: typeof Defined;
      }>,
    ]
  >,
  MessageToDriverBrand
>;
export const MessageToDriver: MessageToDriverC = t.brand(
  t.intersection([
    t.partial({
      message: t.intersection([
        t.partial({
          property: t.string,
          maxLength: t.number,
        }),
        t.type({
          property: Defined,
          maxLength: Defined,
        }),
      ]),
    }),
    t.type({
      message: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      message?: {
        property?: string;
        maxLength?: number;
      } & {
        property: Defined;
        maxLength: Defined;
      };
    } & {
      message: Defined;
    },
    MessageToDriverBrand
  > => true,
  'MessageToDriver',
);
export interface MessageToDriverBrand {
  readonly MessageToDriver: unique symbol;
}

// BookingPeriod
// Optional parameter for default booking period
export type BookingPeriod = t.Branded<
  {
    searchDefault?: number;
  } & {
    searchDefault: Defined;
  },
  BookingPeriodBrand
>;
export type BookingPeriodC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        searchDefault: t.NumberC;
      }>,
      t.TypeC<{
        searchDefault: typeof Defined;
      }>,
    ]
  >,
  BookingPeriodBrand
>;
export const BookingPeriod: BookingPeriodC = t.brand(
  t.intersection([
    t.partial({
      searchDefault: t.number,
    }),
    t.type({
      searchDefault: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      searchDefault?: number;
    } & {
      searchDefault: Defined;
    },
    BookingPeriodBrand
  > => true,
  'BookingPeriod',
);
export interface BookingPeriodBrand {
  readonly BookingPeriod: unique symbol;
}

// GradualRadiusOption
// Optional parameter for gradual radius searching
export type GradualRadiusOption = t.Branded<
  {
    gradualRadius?: number;
    maxRadius?: number;
  } & {
    gradualRadius: Defined;
    maxRadius: Defined;
  },
  GradualRadiusOptionBrand
>;
export type GradualRadiusOptionC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        gradualRadius: t.NumberC;
        maxRadius: t.NumberC;
      }>,
      t.TypeC<{
        gradualRadius: typeof Defined;
        maxRadius: typeof Defined;
      }>,
    ]
  >,
  GradualRadiusOptionBrand
>;
export const GradualRadiusOption: GradualRadiusOptionC = t.brand(
  t.intersection([
    t.partial({
      gradualRadius: t.number,
      maxRadius: t.number,
    }),
    t.type({
      gradualRadius: Defined,
      maxRadius: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      gradualRadius?: number;
      maxRadius?: number;
    } & {
      gradualRadius: Defined;
      maxRadius: Defined;
    },
    GradualRadiusOptionBrand
  > => true,
  'GradualRadiusOption',
);
export interface GradualRadiusOptionBrand {
  readonly GradualRadiusOption: unique symbol;
}

// Provider
// The default export. More information at the top.
export type Provider = t.Branded<
  {
    name?: string;
    agencyId?: Common_.AgencyId;
    groupId?: string;
    hidden?: boolean;
    branding?: {
      primaryColor?: string;
      secondaryColor?: string;
      icon?: Units_.Url;
      logoSolidColor?: Units_.Url;
      logoFullColor?: Units_.Url;
    };
    features?: {
      ticket?: boolean;
      stationsList?: boolean;
      stationsRetrieve?: boolean;
    } & {
      ticket: Defined;
      stationsList: Defined;
      stationsRetrieve: Defined;
    };
    extra?: {
      radius?: {
        fixedFareAmount?: number;
        fixedFareCurrency?: Units_.Currency | Common_.MetaCurrency | Fare_.TokenId;
        maxRadiusMetres?: number;
        description?: string;
      } & {
        fixedFareAmount: Defined;
        fixedFareCurrency: Defined;
        maxRadiusMetres: Defined;
      };
      prebooking?: {
        isSupported?: boolean;
        minIntervalUntilBooking?: number;
        maxIntervalUntilBooking?: number;
      } & {
        isSupported: Defined;
        minIntervalUntilBooking: Defined;
        maxIntervalUntilBooking: Defined;
      };
    };
    personalDataOptionsAllow?: Array<PersonalDataAllowItem_.PersonalDataAllowItem>;
    personalDataCreateAllow?: Array<PersonalDataAllowItem_.PersonalDataAllowItem>;
    personalDataValidations?: Array<PersonalDataValidation_.PersonalDataValidation>;
    requiredPersonalDocuments?: Array<PersonalDocumentRequiredItem_.PersonalDocumentRequiredItem>;
    optionalParameters?: Array<
      Selection | MessageToDriver | BookingPeriod | GradualRadiusOption
    >;
    disruption?: Record<string, unknown>;
  } & {
    name: Defined;
    agencyId: Defined;
    groupId: Defined;
    branding: Defined;
    hidden: Defined;
    features: Defined;
    personalDataOptionsAllow: Defined;
    personalDataCreateAllow: Defined;
    optionalParameters: Defined;
  },
  ProviderBrand
>;
export type ProviderC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        name: t.StringC;
        agencyId: typeof Common_.AgencyId;
        groupId: t.StringC;
        hidden: t.BooleanC;
        branding: t.PartialC<{
          primaryColor: t.StringC;
          secondaryColor: t.StringC;
          icon: typeof Units_.Url;
          logoSolidColor: typeof Units_.Url;
          logoFullColor: typeof Units_.Url;
        }>;
        features: t.IntersectionC<
          [
            t.PartialC<{
              ticket: t.BooleanC;
              stationsList: t.BooleanC;
              stationsRetrieve: t.BooleanC;
            }>,
            t.TypeC<{
              ticket: typeof Defined;
              stationsList: typeof Defined;
              stationsRetrieve: typeof Defined;
            }>,
          ]
        >;
        extra: t.PartialC<{
          radius: t.IntersectionC<
            [
              t.PartialC<{
                fixedFareAmount: t.NumberC;
                fixedFareCurrency: t.UnionC<
                  [
                    typeof Units_.Currency,
                    typeof Common_.MetaCurrency,
                    typeof Fare_.TokenId,
                  ]
                >;
                maxRadiusMetres: t.NumberC;
                description: t.StringC;
              }>,
              t.TypeC<{
                fixedFareAmount: typeof Defined;
                fixedFareCurrency: typeof Defined;
                maxRadiusMetres: typeof Defined;
              }>,
            ]
          >;
          prebooking: t.IntersectionC<
            [
              t.PartialC<{
                isSupported: t.BooleanC;
                minIntervalUntilBooking: t.NumberC;
                maxIntervalUntilBooking: t.NumberC;
              }>,
              t.TypeC<{
                isSupported: typeof Defined;
                minIntervalUntilBooking: typeof Defined;
                maxIntervalUntilBooking: typeof Defined;
              }>,
            ]
          >;
        }>;
        personalDataOptionsAllow: t.ArrayC<
          typeof PersonalDataAllowItem_.PersonalDataAllowItem
        >;
        personalDataCreateAllow: t.ArrayC<
          typeof PersonalDataAllowItem_.PersonalDataAllowItem
        >;
        personalDataValidations: t.ArrayC<
          typeof PersonalDataValidation_.PersonalDataValidation
        >;
        requiredPersonalDocuments: t.ArrayC<
          typeof PersonalDocumentRequiredItem_.PersonalDocumentRequiredItem
        >;
        optionalParameters: t.ArrayC<
          t.UnionC<
            [
              typeof Selection,
              typeof MessageToDriver,
              typeof BookingPeriod,
              typeof GradualRadiusOption,
            ]
          >
        >;
        disruption: t.UnknownRecordC;
      }>,
      t.TypeC<{
        name: typeof Defined;
        agencyId: typeof Defined;
        groupId: typeof Defined;
        branding: typeof Defined;
        hidden: typeof Defined;
        features: typeof Defined;
        personalDataOptionsAllow: typeof Defined;
        personalDataCreateAllow: typeof Defined;
        optionalParameters: typeof Defined;
      }>,
    ]
  >,
  ProviderBrand
>;
export const Provider: ProviderC = t.brand(
  t.intersection([
    t.partial({
      name: t.string,
      agencyId: Common_.AgencyId,
      groupId: t.string,
      hidden: t.boolean,
      branding: t.partial({
        primaryColor: t.string,
        secondaryColor: t.string,
        icon: Units_.Url,
        logoSolidColor: Units_.Url,
        logoFullColor: Units_.Url,
      }),
      features: t.intersection([
        t.partial({
          ticket: t.boolean,
          stationsList: t.boolean,
          stationsRetrieve: t.boolean,
        }),
        t.type({
          ticket: Defined,
          stationsList: Defined,
          stationsRetrieve: Defined,
        }),
      ]),
      extra: t.partial({
        radius: t.intersection([
          t.partial({
            fixedFareAmount: t.number,
            fixedFareCurrency: t.union([
              Units_.Currency,
              Common_.MetaCurrency,
              Fare_.TokenId,
            ]),
            maxRadiusMetres: t.number,
            description: t.string,
          }),
          t.type({
            fixedFareAmount: Defined,
            fixedFareCurrency: Defined,
            maxRadiusMetres: Defined,
          }),
        ]),
        prebooking: t.intersection([
          t.partial({
            isSupported: t.boolean,
            minIntervalUntilBooking: t.number,
            maxIntervalUntilBooking: t.number,
          }),
          t.type({
            isSupported: Defined,
            minIntervalUntilBooking: Defined,
            maxIntervalUntilBooking: Defined,
          }),
        ]),
      }),
      personalDataOptionsAllow: t.array(PersonalDataAllowItem_.PersonalDataAllowItem),
      personalDataCreateAllow: t.array(PersonalDataAllowItem_.PersonalDataAllowItem),
      personalDataValidations: t.array(PersonalDataValidation_.PersonalDataValidation),
      requiredPersonalDocuments: t.array(
        PersonalDocumentRequiredItem_.PersonalDocumentRequiredItem,
      ),
      optionalParameters: t.array(
        t.union([Selection, MessageToDriver, BookingPeriod, GradualRadiusOption]),
      ),
      disruption: t.UnknownRecord,
    }),
    t.type({
      name: Defined,
      agencyId: Defined,
      groupId: Defined,
      branding: Defined,
      hidden: Defined,
      features: Defined,
      personalDataOptionsAllow: Defined,
      personalDataCreateAllow: Defined,
      optionalParameters: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      name?: string;
      agencyId?: Common_.AgencyId;
      groupId?: string;
      hidden?: boolean;
      branding?: {
        primaryColor?: string;
        secondaryColor?: string;
        icon?: Units_.Url;
        logoSolidColor?: Units_.Url;
        logoFullColor?: Units_.Url;
      };
      features?: {
        ticket?: boolean;
        stationsList?: boolean;
        stationsRetrieve?: boolean;
      } & {
        ticket: Defined;
        stationsList: Defined;
        stationsRetrieve: Defined;
      };
      extra?: {
        radius?: {
          fixedFareAmount?: number;
          fixedFareCurrency?: Units_.Currency | Common_.MetaCurrency | Fare_.TokenId;
          maxRadiusMetres?: number;
          description?: string;
        } & {
          fixedFareAmount: Defined;
          fixedFareCurrency: Defined;
          maxRadiusMetres: Defined;
        };
        prebooking?: {
          isSupported?: boolean;
          minIntervalUntilBooking?: number;
          maxIntervalUntilBooking?: number;
        } & {
          isSupported: Defined;
          minIntervalUntilBooking: Defined;
          maxIntervalUntilBooking: Defined;
        };
      };
      personalDataOptionsAllow?: Array<PersonalDataAllowItem_.PersonalDataAllowItem>;
      personalDataCreateAllow?: Array<PersonalDataAllowItem_.PersonalDataAllowItem>;
      personalDataValidations?: Array<PersonalDataValidation_.PersonalDataValidation>;
      requiredPersonalDocuments?: Array<PersonalDocumentRequiredItem_.PersonalDocumentRequiredItem>;
      optionalParameters?: Array<
        Selection | MessageToDriver | BookingPeriod | GradualRadiusOption
      >;
      disruption?: Record<string, unknown>;
    } & {
      name: Defined;
      agencyId: Defined;
      groupId: Defined;
      branding: Defined;
      hidden: Defined;
      features: Defined;
      personalDataOptionsAllow: Defined;
      personalDataCreateAllow: Defined;
      optionalParameters: Defined;
    },
    ProviderBrand
  > => true,
  'Provider',
);
export interface ProviderBrand {
  readonly Provider: unique symbol;
}

export default Provider;

// Success
