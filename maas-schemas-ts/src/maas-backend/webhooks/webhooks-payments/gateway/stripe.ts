/*

undefined
Stripe payment webhook schema

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';

type Defined =
  | Record<string, unknown>
  | Array<unknown>
  | string
  | boolean
  | number
  | null;
const Defined = t.union([
  t.UnknownRecord,
  t.UnknownArray,
  t.string,
  t.boolean,
  t.number,
  t.null,
]);

export const schemaId =
  'http://maasglobal.com/maas-backend/webhooks/webhooks-payments/gateway/stripe.json';

// Request
// The purpose of this remains a mystery
export type Request = t.Branded<
  {
    payload?: {
      id?: string;
      type?: string;
      data?: {
        object?: {
          id?: string;
          amount?: number;
          amount_capturable?: number;
          amount_received?: number;
          charges?: {
            data?: Array<{
              id?: string;
              object?: string;
              amount?: number;
              amount_refunded?: number;
            }>;
          };
        };
      };
    } & {
      type: Defined;
      id: Defined;
      data: Defined;
    };
    params?: {
      gatewayName?: string & 'stripe';
    } & {
      gatewayName: Defined;
    };
  } & {
    params: Defined;
    payload: Defined;
  },
  RequestBrand
>;
export const Request = t.brand(
  t.intersection([
    t.partial({
      payload: t.intersection([
        t.partial({
          id: t.string,
          type: t.string,
          data: t.partial({
            object: t.partial({
              id: t.string,
              amount: t.number,
              amount_capturable: t.number,
              amount_received: t.number,
              charges: t.partial({
                data: t.array(
                  t.partial({
                    id: t.string,
                    object: t.string,
                    amount: t.number,
                    amount_refunded: t.number,
                  }),
                ),
              }),
            }),
          }),
        }),
        t.type({
          type: Defined,
          id: Defined,
          data: Defined,
        }),
      ]),
      params: t.intersection([
        t.partial({
          gatewayName: t.intersection([t.string, t.literal('stripe')]),
        }),
        t.type({
          gatewayName: Defined,
        }),
      ]),
    }),
    t.type({
      params: Defined,
      payload: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      payload?: {
        id?: string;
        type?: string;
        data?: {
          object?: {
            id?: string;
            amount?: number;
            amount_capturable?: number;
            amount_received?: number;
            charges?: {
              data?: Array<{
                id?: string;
                object?: string;
                amount?: number;
                amount_refunded?: number;
              }>;
            };
          };
        };
      } & {
        type: Defined;
        id: Defined;
        data: Defined;
      };
      params?: {
        gatewayName?: string & 'stripe';
      } & {
        gatewayName: Defined;
      };
    } & {
      params: Defined;
      payload: Defined;
    },
    RequestBrand
  > => true,
  'Request',
);
export interface RequestBrand {
  readonly Request: unique symbol;
}

// Default
// The default export. More information at the top.
export type Default = t.Branded<unknown, DefaultBrand>;
export const Default = t.brand(
  t.unknown,
  (x): x is t.Branded<unknown, DefaultBrand> => true,
  'Default',
);
export interface DefaultBrand {
  readonly Default: unique symbol;
}

export default Default;

// Success
