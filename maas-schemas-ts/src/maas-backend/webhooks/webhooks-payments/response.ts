/*

undefined
Response for MaaS webhook to receive payment status updates from payment gateways.

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';

type Defined =
  | Record<string, unknown>
  | Array<unknown>
  | string
  | boolean
  | number
  | null;
const Defined = t.union([
  t.UnknownRecord,
  t.UnknownArray,
  t.string,
  t.boolean,
  t.number,
  t.null,
]);

export const schemaId =
  'http://maasglobal.com/maas-backend/webhooks/webhooks-payments/response.json';

// AvainpayResponse
// The purpose of this remains a mystery
export type AvainpayResponse = t.Branded<
  {
    action_str?: string;
    data_type?: string;
    log_list?: Array<unknown>;
    trans_map?: {
      system_time?: number;
      nonce?: string;
      signature?: string;
    };
    response_map?: {};
  } & {
    action_str: Defined;
    data_type: Defined;
  },
  AvainpayResponseBrand
>;
export const AvainpayResponse = t.brand(
  t.intersection([
    t.partial({
      action_str: t.string,
      data_type: t.string,
      log_list: t.UnknownArray,
      trans_map: t.partial({
        system_time: t.number,
        nonce: t.string,
        signature: t.string,
      }),
      response_map: t.type({}),
    }),
    t.type({
      action_str: Defined,
      data_type: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      action_str?: string;
      data_type?: string;
      log_list?: Array<unknown>;
      trans_map?: {
        system_time?: number;
        nonce?: string;
        signature?: string;
      };
      response_map?: {};
    } & {
      action_str: Defined;
      data_type: Defined;
    },
    AvainpayResponseBrand
  > => true,
  'AvainpayResponse',
);
export interface AvainpayResponseBrand {
  readonly AvainpayResponse: unique symbol;
}

// Default
// The default export. More information at the top.
export type Default = t.Branded<AvainpayResponse, DefaultBrand>;
export const Default = t.brand(
  AvainpayResponse,
  (x): x is t.Branded<AvainpayResponse, DefaultBrand> => true,
  'Default',
);
export interface DefaultBrand {
  readonly Default: unique symbol;
}

export default Default;

// Success
