/*

undefined
MaaS customer schema

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';
import * as Units_ from 'maas-schemas-ts/core/components/units';
import * as PersonalData_ from 'maas-schemas-ts/maas-backend/customers/personalData';
import * as PaymentSource_ from 'maas-schemas-ts/maas-backend/customers/payment-sources/paymentSource';
import * as Fare_ from 'maas-schemas-ts/core/components/fare';
import * as Region_ from 'maas-schemas-ts/core/region';
import * as Authorization_ from 'maas-schemas-ts/core/components/authorization';

type Defined =
  | Record<string, unknown>
  | Array<unknown>
  | string
  | boolean
  | number
  | null;
const Defined = t.union([
  t.UnknownRecord,
  t.UnknownArray,
  t.string,
  t.boolean,
  t.number,
  t.null,
]);

export const schemaId = 'http://maasglobal.com/maas-backend/customers/customer.json';

// Default
// The default export. More information at the top.
export type Default = t.Branded<
  {
    identityId?: Units_.IdentityId;
    profileImageUrl?: string;
    personalData?: PersonalData_.Default;
    paymentSources?: Array<PaymentSource_.PaymentSource>;
    balances?: Array<Fare_.Default>;
    region?: Region_.Default;
    authorizations?: Array<Authorization_.Default>;
    favoriteLocations?: Array<{}>;
  } & {
    personalData: Defined;
    paymentSources: Defined;
    balances: Defined;
    region: Defined;
    authorizations: Defined;
  },
  DefaultBrand
>;
export const Default = t.brand(
  t.intersection([
    t.partial({
      identityId: Units_.IdentityId,
      profileImageUrl: t.string,
      personalData: PersonalData_.Default,
      paymentSources: t.array(PaymentSource_.PaymentSource),
      balances: t.array(Fare_.Default),
      region: Region_.Default,
      authorizations: t.array(Authorization_.Default),
      favoriteLocations: t.array(t.type({})),
    }),
    t.type({
      personalData: Defined,
      paymentSources: Defined,
      balances: Defined,
      region: Defined,
      authorizations: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      identityId?: Units_.IdentityId;
      profileImageUrl?: string;
      personalData?: PersonalData_.Default;
      paymentSources?: Array<PaymentSource_.PaymentSource>;
      balances?: Array<Fare_.Default>;
      region?: Region_.Default;
      authorizations?: Array<Authorization_.Default>;
      favoriteLocations?: Array<{}>;
    } & {
      personalData: Defined;
      paymentSources: Defined;
      balances: Defined;
      region: Defined;
      authorizations: Defined;
    },
    DefaultBrand
  > => true,
  'Default',
);
export interface DefaultBrand {
  readonly Default: unique symbol;
}

export default Default;

// Success
