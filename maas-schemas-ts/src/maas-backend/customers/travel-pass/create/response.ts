/*

undefined
Insert travel pass response

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as Units_ from '../../../../core/components/units';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export const schemaId =
  'http://maasglobal.com/maas-backend/customers/travel-pass/create/response.json';

// Response
// The default export. More information at the top.
export type Response = t.Branded<
  {
    travelPass?: {
      id?: Units_.Uuid;
      identityId?: Units_.IdentityId;
      type?: string;
      number?: string;
      created?: Units_.Time;
      modified?: Units_.Time;
    };
  } & {
    id: Defined;
    identityId: Defined;
    type: Defined;
    number: Defined;
  },
  ResponseBrand
>;
export type ResponseC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        travelPass: t.PartialC<{
          id: typeof Units_.Uuid;
          identityId: typeof Units_.IdentityId;
          type: t.StringC;
          number: t.StringC;
          created: typeof Units_.Time;
          modified: typeof Units_.Time;
        }>;
      }>,
      t.TypeC<{
        id: typeof Defined;
        identityId: typeof Defined;
        type: typeof Defined;
        number: typeof Defined;
      }>,
    ]
  >,
  ResponseBrand
>;
export const Response: ResponseC = t.brand(
  t.intersection([
    t.partial({
      travelPass: t.partial({
        id: Units_.Uuid,
        identityId: Units_.IdentityId,
        type: t.string,
        number: t.string,
        created: Units_.Time,
        modified: Units_.Time,
      }),
    }),
    t.type({
      id: Defined,
      identityId: Defined,
      type: Defined,
      number: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      travelPass?: {
        id?: Units_.Uuid;
        identityId?: Units_.IdentityId;
        type?: string;
        number?: string;
        created?: Units_.Time;
        modified?: Units_.Time;
      };
    } & {
      id: Defined;
      identityId: Defined;
      type: Defined;
      number: Defined;
    },
    ResponseBrand
  > => true,
  'Response',
);
export interface ResponseBrand {
  readonly Response: unique symbol;
}

export default Response;

// Success
