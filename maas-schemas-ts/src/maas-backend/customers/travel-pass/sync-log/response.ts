/*

undefined
Insert travel pass logs response

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as Units_ from '../../../../core/components/units';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export const schemaId =
  'http://maasglobal.com/maas-backend/customers/travel-pass/sync-log/response.json';

// Response
// The default export. More information at the top.
export type Response = t.Branded<
  {
    travelPassLogs?: Array<
      {
        id?: Units_.Uuid;
        passId?: Units_.Uuid;
        detail?: Record<string, unknown>;
        number?: string;
        created?: Units_.Time;
      } & {
        id: Defined;
        passId: Defined;
      }
    >;
  },
  ResponseBrand
>;
export type ResponseC = t.BrandC<
  t.PartialC<{
    travelPassLogs: t.ArrayC<
      t.IntersectionC<
        [
          t.PartialC<{
            id: typeof Units_.Uuid;
            passId: typeof Units_.Uuid;
            detail: t.UnknownRecordC;
            number: t.StringC;
            created: typeof Units_.Time;
          }>,
          t.TypeC<{
            id: typeof Defined;
            passId: typeof Defined;
          }>,
        ]
      >
    >;
  }>,
  ResponseBrand
>;
export const Response: ResponseC = t.brand(
  t.partial({
    travelPassLogs: t.array(
      t.intersection([
        t.partial({
          id: Units_.Uuid,
          passId: Units_.Uuid,
          detail: t.UnknownRecord,
          number: t.string,
          created: Units_.Time,
        }),
        t.type({
          id: Defined,
          passId: Defined,
        }),
      ]),
    ),
  }),
  (
    x,
  ): x is t.Branded<
    {
      travelPassLogs?: Array<
        {
          id?: Units_.Uuid;
          passId?: Units_.Uuid;
          detail?: Record<string, unknown>;
          number?: string;
          created?: Units_.Time;
        } & {
          id: Defined;
          passId: Defined;
        }
      >;
    },
    ResponseBrand
  > => true,
  'Response',
);
export interface ResponseBrand {
  readonly Response: unique symbol;
}

export default Response;

// Success
