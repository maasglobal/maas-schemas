/*

undefined
MaaS customer payment sources update

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';
import * as Units_ from 'maas-schemas-ts/core/components/units';
import * as PaymentSource_ from 'maas-schemas-ts/maas-backend/customers/payment-sources/paymentSource';
import * as ApiCommon_ from 'maas-schemas-ts/core/components/api-common';

type Defined =
  | Record<string, unknown>
  | Array<unknown>
  | string
  | boolean
  | number
  | null;
const Defined = t.union([
  t.UnknownRecord,
  t.UnknownArray,
  t.string,
  t.boolean,
  t.number,
  t.null,
]);

export const schemaId =
  'http://maasglobal.com/maas-backend/customers/payment-sources/update/request.json';

// Default
// The default export. More information at the top.
export type Default = t.Branded<
  {
    identityId?: Units_.IdentityId;
    customerId?: Units_.IdentityId;
    paymentSourceId?: PaymentSource_.PaymentSourceId;
    payload?: {
      paymentSource?: {
        isDefault?: true;
        alias?: PaymentSource_.Alias;
      } & (
        | {
            isDefault: Defined;
          }
        | {
            alias: Defined;
          });
    } & {
      paymentSource: Defined;
    };
    headers?: ApiCommon_.Headers;
  } & {
    identityId: Defined;
    customerId: Defined;
    paymentSourceId: Defined;
    payload: Defined;
    headers: Defined;
  },
  DefaultBrand
>;
export const Default = t.brand(
  t.intersection([
    t.partial({
      identityId: Units_.IdentityId,
      customerId: Units_.IdentityId,
      paymentSourceId: PaymentSource_.PaymentSourceId,
      payload: t.intersection([
        t.partial({
          paymentSource: t.intersection([
            t.partial({
              isDefault: t.literal(true),
              alias: PaymentSource_.Alias,
            }),
            t.union([
              t.type({
                isDefault: Defined,
              }),
              t.type({
                alias: Defined,
              }),
            ]),
          ]),
        }),
        t.type({
          paymentSource: Defined,
        }),
      ]),
      headers: ApiCommon_.Headers,
    }),
    t.type({
      identityId: Defined,
      customerId: Defined,
      paymentSourceId: Defined,
      payload: Defined,
      headers: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      identityId?: Units_.IdentityId;
      customerId?: Units_.IdentityId;
      paymentSourceId?: PaymentSource_.PaymentSourceId;
      payload?: {
        paymentSource?: {
          isDefault?: true;
          alias?: PaymentSource_.Alias;
        } & (
          | {
              isDefault: Defined;
            }
          | {
              alias: Defined;
            });
      } & {
        paymentSource: Defined;
      };
      headers?: ApiCommon_.Headers;
    } & {
      identityId: Defined;
      customerId: Defined;
      paymentSourceId: Defined;
      payload: Defined;
      headers: Defined;
    },
    DefaultBrand
  > => true,
  'Default',
);
export interface DefaultBrand {
  readonly Default: unique symbol;
}

export default Default;

// Success
