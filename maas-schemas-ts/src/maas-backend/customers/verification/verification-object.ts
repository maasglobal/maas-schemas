/*

undefined
MaaS verification schema

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';
import * as Units_ from 'maas-schemas-ts/core/components/units';
import * as Common_ from 'maas-schemas-ts/core/components/common';

type Defined =
  | Record<string, unknown>
  | Array<unknown>
  | string
  | boolean
  | number
  | null;
const Defined = t.union([
  t.UnknownRecord,
  t.UnknownArray,
  t.string,
  t.boolean,
  t.number,
  t.null,
]);

export const schemaId =
  'http://maasglobal.com/maas-backend/customers/verification/verification-object.json';

// Verification
// The purpose of this remains a mystery
export type Verification = t.Branded<
  {
    id?: string;
    identityId?: Units_.IdentityId;
    details?: {
      url?: string;
      sessionToken?: string;
    } & {
      url: Defined;
      sessionToken: Defined;
    };
    validFrom?: string;
    validTo?: string;
    status?: string;
    type?: string;
    stateLog?: Array<
      {
        status?: string;
        timestamp?: Units_.Time;
      } & {
        status: Defined;
        timestamp: Defined;
      }
    >;
    created?: Units_.Time;
    modified?: Units_.Time;
    agencyId?: Common_.AgencyId;
  } & {
    id: Defined;
    identityId: Defined;
    details: Defined;
    status: Defined;
    type: Defined;
    stateLog: Defined;
  },
  VerificationBrand
>;
export const Verification = t.brand(
  t.intersection([
    t.partial({
      id: t.string,
      identityId: Units_.IdentityId,
      details: t.intersection([
        t.partial({
          url: t.string,
          sessionToken: t.string,
        }),
        t.type({
          url: Defined,
          sessionToken: Defined,
        }),
      ]),
      validFrom: t.string,
      validTo: t.string,
      status: t.string,
      type: t.string,
      stateLog: t.array(
        t.intersection([
          t.partial({
            status: t.string,
            timestamp: Units_.Time,
          }),
          t.type({
            status: Defined,
            timestamp: Defined,
          }),
        ]),
      ),
      created: Units_.Time,
      modified: Units_.Time,
      agencyId: Common_.AgencyId,
    }),
    t.type({
      id: Defined,
      identityId: Defined,
      details: Defined,
      status: Defined,
      type: Defined,
      stateLog: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      id?: string;
      identityId?: Units_.IdentityId;
      details?: {
        url?: string;
        sessionToken?: string;
      } & {
        url: Defined;
        sessionToken: Defined;
      };
      validFrom?: string;
      validTo?: string;
      status?: string;
      type?: string;
      stateLog?: Array<
        {
          status?: string;
          timestamp?: Units_.Time;
        } & {
          status: Defined;
          timestamp: Defined;
        }
      >;
      created?: Units_.Time;
      modified?: Units_.Time;
      agencyId?: Common_.AgencyId;
    } & {
      id: Defined;
      identityId: Defined;
      details: Defined;
      status: Defined;
      type: Defined;
      stateLog: Defined;
    },
    VerificationBrand
  > => true,
  'Verification',
);
export interface VerificationBrand {
  readonly Verification: unique symbol;
}

// Default
// The default export. More information at the top.
export type Default = t.Branded<unknown, DefaultBrand>;
export const Default = t.brand(
  t.unknown,
  (x): x is t.Branded<unknown, DefaultBrand> => true,
  'Default',
);
export interface DefaultBrand {
  readonly Default: unique symbol;
}

export default Default;

// Success
