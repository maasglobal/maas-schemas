/*

undefined
MaaS verification schema

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as Units_ from '../../../core/components/units';
import * as StateLog_ from '../../../core/components/state-log';
import * as Common_ from '../../../core/components/common';
import * as I18n_ from '../../../core/components/i18n';
import * as KycService_ from '../../../core/kyc-service';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export const schemaId =
  'http://maasglobal.com/maas-backend/customers/verification/verification-object.json';

// Verification
// The purpose of this remains a mystery
export type Verification = t.Branded<
  {
    id?: string;
    identityId?: Units_.IdentityId;
    kycServiceId?: string;
    url?: Units_.Url;
    token?: string;
    status?: string;
    stateLog?: StateLog_.StateLog;
    created?: Units_.Time;
    modified?: Units_.Time;
    metadata?:
      | {
          agencyId?: Common_.AgencyId;
          locale?: I18n_.Locale;
        }
      | {
          planId?: string;
          locale?: I18n_.Locale;
        };
    kycService?: KycService_.KycService;
  } & {
    id: Defined;
    identityId: Defined;
    kycServiceId: Defined;
    kycService: Defined;
    status: Defined;
    stateLog: Defined;
  },
  VerificationBrand
>;
export type VerificationC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        id: t.StringC;
        identityId: typeof Units_.IdentityId;
        kycServiceId: t.StringC;
        url: typeof Units_.Url;
        token: t.StringC;
        status: t.StringC;
        stateLog: typeof StateLog_.StateLog;
        created: typeof Units_.Time;
        modified: typeof Units_.Time;
        metadata: t.UnionC<
          [
            t.PartialC<{
              agencyId: typeof Common_.AgencyId;
              locale: typeof I18n_.Locale;
            }>,
            t.PartialC<{
              planId: t.StringC;
              locale: typeof I18n_.Locale;
            }>,
          ]
        >;
        kycService: typeof KycService_.KycService;
      }>,
      t.TypeC<{
        id: typeof Defined;
        identityId: typeof Defined;
        kycServiceId: typeof Defined;
        kycService: typeof Defined;
        status: typeof Defined;
        stateLog: typeof Defined;
      }>,
    ]
  >,
  VerificationBrand
>;
export const Verification: VerificationC = t.brand(
  t.intersection([
    t.partial({
      id: t.string,
      identityId: Units_.IdentityId,
      kycServiceId: t.string,
      url: Units_.Url,
      token: t.string,
      status: t.string,
      stateLog: StateLog_.StateLog,
      created: Units_.Time,
      modified: Units_.Time,
      metadata: t.union([
        t.partial({
          agencyId: Common_.AgencyId,
          locale: I18n_.Locale,
        }),
        t.partial({
          planId: t.string,
          locale: I18n_.Locale,
        }),
      ]),
      kycService: KycService_.KycService,
    }),
    t.type({
      id: Defined,
      identityId: Defined,
      kycServiceId: Defined,
      kycService: Defined,
      status: Defined,
      stateLog: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      id?: string;
      identityId?: Units_.IdentityId;
      kycServiceId?: string;
      url?: Units_.Url;
      token?: string;
      status?: string;
      stateLog?: StateLog_.StateLog;
      created?: Units_.Time;
      modified?: Units_.Time;
      metadata?:
        | {
            agencyId?: Common_.AgencyId;
            locale?: I18n_.Locale;
          }
        | {
            planId?: string;
            locale?: I18n_.Locale;
          };
      kycService?: KycService_.KycService;
    } & {
      id: Defined;
      identityId: Defined;
      kycServiceId: Defined;
      kycService: Defined;
      status: Defined;
      stateLog: Defined;
    },
    VerificationBrand
  > => true,
  'Verification',
);
export interface VerificationBrand {
  readonly Verification: unique symbol;
}

// VerificationObject
// The default export. More information at the top.
export type VerificationObject = t.Branded<unknown, VerificationObjectBrand>;
export type VerificationObjectC = t.BrandC<t.UnknownC, VerificationObjectBrand>;
export const VerificationObject: VerificationObjectC = t.brand(
  t.unknown,
  (x): x is t.Branded<unknown, VerificationObjectBrand> => true,
  'VerificationObject',
);
export interface VerificationObjectBrand {
  readonly VerificationObject: unique symbol;
}

export default VerificationObject;

// Success
