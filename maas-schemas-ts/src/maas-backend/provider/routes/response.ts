/*

undefined
Response schema for routes providers, subset of routes-query response schema

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';
import * as Place_ from 'maas-schemas-ts/core/components/place';
import * as Itinerary_ from 'maas-schemas-ts/core/itinerary';

type Defined =
  | Record<string, unknown>
  | Array<unknown>
  | string
  | boolean
  | number
  | null;
const Defined = t.union([
  t.UnknownRecord,
  t.UnknownArray,
  t.string,
  t.boolean,
  t.number,
  t.null,
]);

export const schemaId =
  'http://maasglobal.com/maas-backend/provider/routes/response.json';

// Itineraries
// The purpose of this remains a mystery
export type Itineraries = t.Branded<Array<Itinerary_.Default>, ItinerariesBrand>;
export const Itineraries = t.brand(
  t.array(Itinerary_.Default),
  (x): x is t.Branded<Array<Itinerary_.Default>, ItinerariesBrand> => true,
  'Itineraries',
);
export interface ItinerariesBrand {
  readonly Itineraries: unique symbol;
}

// Plan1
// The purpose of this remains a mystery
export type Plan1 = t.Branded<
  {
    from?: Place_.Default;
    outwards?: Itineraries;
    returns?: Itineraries;
  } & {
    from: Defined;
    outwards: Defined;
    returns: Defined;
  },
  Plan1Brand
>;
export const Plan1 = t.brand(
  t.intersection([
    t.partial({
      from: Place_.Default,
      outwards: Itineraries,
      returns: Itineraries,
    }),
    t.type({
      from: Defined,
      outwards: Defined,
      returns: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      from?: Place_.Default;
      outwards?: Itineraries;
      returns?: Itineraries;
    } & {
      from: Defined;
      outwards: Defined;
      returns: Defined;
    },
    Plan1Brand
  > => true,
  'Plan1',
);
export interface Plan1Brand {
  readonly Plan1: unique symbol;
}

// Plan2
// The purpose of this remains a mystery
export type Plan2 = t.Branded<
  {
    from?: Place_.Default;
    itineraries?: Itineraries;
  } & {
    from: Defined;
    itineraries: Defined;
  },
  Plan2Brand
>;
export const Plan2 = t.brand(
  t.intersection([
    t.partial({
      from: Place_.Default,
      itineraries: Itineraries,
    }),
    t.type({
      from: Defined,
      itineraries: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      from?: Place_.Default;
      itineraries?: Itineraries;
    } & {
      from: Defined;
      itineraries: Defined;
    },
    Plan2Brand
  > => true,
  'Plan2',
);
export interface Plan2Brand {
  readonly Plan2: unique symbol;
}

// Default
// The default export. More information at the top.
export type Default = t.Branded<
  {
    plan?: Plan1 | Plan2;
  },
  DefaultBrand
>;
export const Default = t.brand(
  t.partial({
    plan: t.union([Plan1, Plan2]),
  }),
  (
    x,
  ): x is t.Branded<
    {
      plan?: Plan1 | Plan2;
    },
    DefaultBrand
  > => true,
  'Default',
);
export interface DefaultBrand {
  readonly Default: unique symbol;
}

export default Default;

// Success
