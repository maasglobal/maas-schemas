/*

undefined
Travel pass component

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as Units_ from '../../core/components/units';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export const schemaId = 'http://maasglobal.com/maas-backend/core/travel-pass.json';

// TravelPass
// The default export. More information at the top.
export type TravelPass = t.Branded<
  {
    id?: Units_.Uuid;
    identityId?: Units_.IdentityId;
    type?: string;
    number?: string;
    created?: Units_.Time;
    modified?: Units_.Time;
  } & {
    id: Defined;
    identityId: Defined;
    type: Defined;
    number: Defined;
  },
  TravelPassBrand
>;
export type TravelPassC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        id: typeof Units_.Uuid;
        identityId: typeof Units_.IdentityId;
        type: t.StringC;
        number: t.StringC;
        created: typeof Units_.Time;
        modified: typeof Units_.Time;
      }>,
      t.TypeC<{
        id: typeof Defined;
        identityId: typeof Defined;
        type: typeof Defined;
        number: typeof Defined;
      }>,
    ]
  >,
  TravelPassBrand
>;
export const TravelPass: TravelPassC = t.brand(
  t.intersection([
    t.partial({
      id: Units_.Uuid,
      identityId: Units_.IdentityId,
      type: t.string,
      number: t.string,
      created: Units_.Time,
      modified: Units_.Time,
    }),
    t.type({
      id: Defined,
      identityId: Defined,
      type: Defined,
      number: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      id?: Units_.Uuid;
      identityId?: Units_.IdentityId;
      type?: string;
      number?: string;
      created?: Units_.Time;
      modified?: Units_.Time;
    } & {
      id: Defined;
      identityId: Defined;
      type: Defined;
      number: Defined;
    },
    TravelPassBrand
  > => true,
  'TravelPass',
);
export interface TravelPassBrand {
  readonly TravelPass: unique symbol;
}

export default TravelPass;

// Success
