/*

undefined
MaaS subscription intent schema

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';
import * as State_ from 'maas-schemas-ts/core/components/state';
import * as Units_ from 'maas-schemas-ts/core/components/units';
import * as StateLog_ from 'maas-schemas-ts/core/components/state-log';

type Defined =
  | Record<string, unknown>
  | Array<unknown>
  | string
  | boolean
  | number
  | null;
const Defined = t.union([
  t.UnknownRecord,
  t.UnknownArray,
  t.string,
  t.boolean,
  t.number,
  t.null,
]);

export const schemaId =
  'http://maasglobal.com/maas-backend/subscriptions/subscription-intent.json';

// ItemId
// The purpose of this remains a mystery
export type ItemId = t.Branded<string, ItemIdBrand>;
export const ItemId = t.brand(
  t.string,
  (x): x is t.Branded<string, ItemIdBrand> =>
    (typeof x !== 'string' || x.length >= 1) &&
    (typeof x !== 'string' || x.length <= 255),
  'ItemId',
);
export interface ItemIdBrand {
  readonly ItemId: unique symbol;
}

// SubscriptionIntentCreate
// The purpose of this remains a mystery
export type SubscriptionIntentCreate = t.Branded<
  {
    planId?: ItemId;
    planAddons?: Array<ItemId>;
    state?: State_.SubscriptionIntentState;
    startTime?: Units_.Time;
  } & {
    planId: Defined;
    planAddons: Defined;
  },
  SubscriptionIntentCreateBrand
>;
export const SubscriptionIntentCreate = t.brand(
  t.intersection([
    t.partial({
      planId: ItemId,
      planAddons: t.array(ItemId),
      state: State_.SubscriptionIntentState,
      startTime: Units_.Time,
    }),
    t.type({
      planId: Defined,
      planAddons: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      planId?: ItemId;
      planAddons?: Array<ItemId>;
      state?: State_.SubscriptionIntentState;
      startTime?: Units_.Time;
    } & {
      planId: Defined;
      planAddons: Defined;
    },
    SubscriptionIntentCreateBrand
  > => true,
  'SubscriptionIntentCreate',
);
export interface SubscriptionIntentCreateBrand {
  readonly SubscriptionIntentCreate: unique symbol;
}

// SubscriptionIntentBase
// The purpose of this remains a mystery
export type SubscriptionIntentBase = t.Branded<
  {
    id?: Units_.Uuid;
    identityId?: Units_.IdentityId;
    subscriptionId?: Units_.IdentityId;
    nextPlanId?: ItemId;
    nextPlanAddons?: Array<ItemId>;
    prevPlanId?: ItemId;
    prevPlanAddons?: Array<ItemId>;
    startTime?: Units_.Time;
    state?: State_.SubscriptionIntentState;
    stateLog?: StateLog_.StateLog;
    created?: Units_.Time;
    modified?: Units_.Time;
  } & {
    identityId: Defined;
    subscriptionId: Defined;
    nextPlanId: Defined;
    nextPlanAddons: Defined;
  },
  SubscriptionIntentBaseBrand
>;
export const SubscriptionIntentBase = t.brand(
  t.intersection([
    t.partial({
      id: Units_.Uuid,
      identityId: Units_.IdentityId,
      subscriptionId: Units_.IdentityId,
      nextPlanId: ItemId,
      nextPlanAddons: t.array(ItemId),
      prevPlanId: ItemId,
      prevPlanAddons: t.array(ItemId),
      startTime: Units_.Time,
      state: State_.SubscriptionIntentState,
      stateLog: StateLog_.StateLog,
      created: Units_.Time,
      modified: Units_.Time,
    }),
    t.type({
      identityId: Defined,
      subscriptionId: Defined,
      nextPlanId: Defined,
      nextPlanAddons: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      id?: Units_.Uuid;
      identityId?: Units_.IdentityId;
      subscriptionId?: Units_.IdentityId;
      nextPlanId?: ItemId;
      nextPlanAddons?: Array<ItemId>;
      prevPlanId?: ItemId;
      prevPlanAddons?: Array<ItemId>;
      startTime?: Units_.Time;
      state?: State_.SubscriptionIntentState;
      stateLog?: StateLog_.StateLog;
      created?: Units_.Time;
      modified?: Units_.Time;
    } & {
      identityId: Defined;
      subscriptionId: Defined;
      nextPlanId: Defined;
      nextPlanAddons: Defined;
    },
    SubscriptionIntentBaseBrand
  > => true,
  'SubscriptionIntentBase',
);
export interface SubscriptionIntentBaseBrand {
  readonly SubscriptionIntentBase: unique symbol;
}

// SubscriptionIntent
// The default export. More information at the top.
export type SubscriptionIntent = t.Branded<unknown, SubscriptionIntentBrand>;
export const SubscriptionIntent = t.brand(
  t.unknown,
  (x): x is t.Branded<unknown, SubscriptionIntentBrand> => true,
  'SubscriptionIntent',
);
export interface SubscriptionIntentBrand {
  readonly SubscriptionIntent: unique symbol;
}

export default SubscriptionIntent;

// Success
