/*

undefined
Request schema for subscriptions-intents-update

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as Units_ from '../../../core/components/units';
import * as SubscriptionIntent_ from '../subscription-intent';
import * as ApiCommon_ from '../../../core/components/api-common';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export const schemaId =
  'http://maasglobal.com/maas-backend/subscriptions/subscriptions-intents-update/request.json';

// Request
// The default export. More information at the top.
export type Request = t.Branded<
  {
    identityId?: Units_.IdentityId;
    userId?: Units_.IdentityId;
    subscriptionIntentId?: Units_.Uuid;
    payload?: SubscriptionIntent_.SubscriptionIntentCreate;
    headers?: ApiCommon_.Headers;
  } & {
    identityId: Defined;
    userId: Defined;
    subscriptionIntentId: Defined;
    payload: Defined;
  },
  RequestBrand
>;
export type RequestC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        identityId: typeof Units_.IdentityId;
        userId: typeof Units_.IdentityId;
        subscriptionIntentId: typeof Units_.Uuid;
        payload: typeof SubscriptionIntent_.SubscriptionIntentCreate;
        headers: typeof ApiCommon_.Headers;
      }>,
      t.TypeC<{
        identityId: typeof Defined;
        userId: typeof Defined;
        subscriptionIntentId: typeof Defined;
        payload: typeof Defined;
      }>,
    ]
  >,
  RequestBrand
>;
export const Request: RequestC = t.brand(
  t.intersection([
    t.partial({
      identityId: Units_.IdentityId,
      userId: Units_.IdentityId,
      subscriptionIntentId: Units_.Uuid,
      payload: SubscriptionIntent_.SubscriptionIntentCreate,
      headers: ApiCommon_.Headers,
    }),
    t.type({
      identityId: Defined,
      userId: Defined,
      subscriptionIntentId: Defined,
      payload: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      identityId?: Units_.IdentityId;
      userId?: Units_.IdentityId;
      subscriptionIntentId?: Units_.Uuid;
      payload?: SubscriptionIntent_.SubscriptionIntentCreate;
      headers?: ApiCommon_.Headers;
    } & {
      identityId: Defined;
      userId: Defined;
      subscriptionIntentId: Defined;
      payload: Defined;
    },
    RequestBrand
  > => true,
  'Request',
);
export interface RequestBrand {
  readonly Request: unique symbol;
}

export default Request;

// Success
