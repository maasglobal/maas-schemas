/*

undefined
MaaS package group schema

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as Units_ from '../../core/components/units';
import * as PackageOption_ from './package-option';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export const schemaId = 'http://maasglobal.com/maas-backend/packages/package-group.json';

// InfoSection
// Package info section
export type InfoSection = t.Branded<
  {
    hidden?: boolean;
    name?: string;
    shortDescription?: string;
    description?: string;
  },
  InfoSectionBrand
>;
export type InfoSectionC = t.BrandC<
  t.PartialC<{
    hidden: t.BooleanC;
    name: t.StringC;
    shortDescription: t.StringC;
    description: t.StringC;
  }>,
  InfoSectionBrand
>;
export const InfoSection: InfoSectionC = t.brand(
  t.partial({
    hidden: t.boolean,
    name: t.string,
    shortDescription: t.string,
    description: t.string,
  }),
  (
    x,
  ): x is t.Branded<
    {
      hidden?: boolean;
      name?: string;
      shortDescription?: string;
      description?: string;
    },
    InfoSectionBrand
  > => true,
  'InfoSection',
);
export interface InfoSectionBrand {
  readonly InfoSection: unique symbol;
}

// LinkedProducts
// Package linked products
export type LinkedProducts = t.Branded<
  {
    hidden?: boolean;
    name?: string;
    shortDescription?: string;
    description?: string;
  },
  LinkedProductsBrand
>;
export type LinkedProductsC = t.BrandC<
  t.PartialC<{
    hidden: t.BooleanC;
    name: t.StringC;
    shortDescription: t.StringC;
    description: t.StringC;
  }>,
  LinkedProductsBrand
>;
export const LinkedProducts: LinkedProductsC = t.brand(
  t.partial({
    hidden: t.boolean,
    name: t.string,
    shortDescription: t.string,
    description: t.string,
  }),
  (
    x,
  ): x is t.Branded<
    {
      hidden?: boolean;
      name?: string;
      shortDescription?: string;
      description?: string;
    },
    LinkedProductsBrand
  > => true,
  'LinkedProducts',
);
export interface LinkedProductsBrand {
  readonly LinkedProducts: unique symbol;
}

// PackageGroup
// The default export. More information at the top.
export type PackageGroup = t.Branded<
  {
    id?: string;
    name?: string;
    description?: string;
    icon?: Units_.Url;
    image?: Units_.Url;
    active?: boolean;
    packageDescription?: string;
    packageTitle?: string;
    packageShortDescription?: string;
    packageType?: 'oneOf' | 'someOf' | 'allOf' | 'oneOrNoneOf' | 'someOrNoneOf';
    agencyId?: string;
    productId?: string;
    leftColor?: string;
    rightColor?: string;
    options?: Array<PackageOption_.PackageOption>;
    linkedProducts?: Array<LinkedProducts>;
    infoSections?: Array<InfoSection>;
  } & {
    id: Defined;
    name: Defined;
    description: Defined;
    icon: Defined;
    image: Defined;
    active: Defined;
    packageDescription: Defined;
    packageTitle: Defined;
    packageShortDescription: Defined;
    packageType: Defined;
    agencyId: Defined;
    productId: Defined;
    leftColor: Defined;
    rightColor: Defined;
    options: Defined;
  },
  PackageGroupBrand
>;
export type PackageGroupC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        id: t.StringC;
        name: t.StringC;
        description: t.StringC;
        icon: typeof Units_.Url;
        image: typeof Units_.Url;
        active: t.BooleanC;
        packageDescription: t.StringC;
        packageTitle: t.StringC;
        packageShortDescription: t.StringC;
        packageType: t.UnionC<
          [
            t.LiteralC<'oneOf'>,
            t.LiteralC<'someOf'>,
            t.LiteralC<'allOf'>,
            t.LiteralC<'oneOrNoneOf'>,
            t.LiteralC<'someOrNoneOf'>,
          ]
        >;
        agencyId: t.StringC;
        productId: t.StringC;
        leftColor: t.StringC;
        rightColor: t.StringC;
        options: t.ArrayC<typeof PackageOption_.PackageOption>;
        linkedProducts: t.ArrayC<typeof LinkedProducts>;
        infoSections: t.ArrayC<typeof InfoSection>;
      }>,
      t.TypeC<{
        id: typeof Defined;
        name: typeof Defined;
        description: typeof Defined;
        icon: typeof Defined;
        image: typeof Defined;
        active: typeof Defined;
        packageDescription: typeof Defined;
        packageTitle: typeof Defined;
        packageShortDescription: typeof Defined;
        packageType: typeof Defined;
        agencyId: typeof Defined;
        productId: typeof Defined;
        leftColor: typeof Defined;
        rightColor: typeof Defined;
        options: typeof Defined;
      }>,
    ]
  >,
  PackageGroupBrand
>;
export const PackageGroup: PackageGroupC = t.brand(
  t.intersection([
    t.partial({
      id: t.string,
      name: t.string,
      description: t.string,
      icon: Units_.Url,
      image: Units_.Url,
      active: t.boolean,
      packageDescription: t.string,
      packageTitle: t.string,
      packageShortDescription: t.string,
      packageType: t.union([
        t.literal('oneOf'),
        t.literal('someOf'),
        t.literal('allOf'),
        t.literal('oneOrNoneOf'),
        t.literal('someOrNoneOf'),
      ]),
      agencyId: t.string,
      productId: t.string,
      leftColor: t.string,
      rightColor: t.string,
      options: t.array(PackageOption_.PackageOption),
      linkedProducts: t.array(LinkedProducts),
      infoSections: t.array(InfoSection),
    }),
    t.type({
      id: Defined,
      name: Defined,
      description: Defined,
      icon: Defined,
      image: Defined,
      active: Defined,
      packageDescription: Defined,
      packageTitle: Defined,
      packageShortDescription: Defined,
      packageType: Defined,
      agencyId: Defined,
      productId: Defined,
      leftColor: Defined,
      rightColor: Defined,
      options: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      id?: string;
      name?: string;
      description?: string;
      icon?: Units_.Url;
      image?: Units_.Url;
      active?: boolean;
      packageDescription?: string;
      packageTitle?: string;
      packageShortDescription?: string;
      packageType?: 'oneOf' | 'someOf' | 'allOf' | 'oneOrNoneOf' | 'someOrNoneOf';
      agencyId?: string;
      productId?: string;
      leftColor?: string;
      rightColor?: string;
      options?: Array<PackageOption_.PackageOption>;
      linkedProducts?: Array<LinkedProducts>;
      infoSections?: Array<InfoSection>;
    } & {
      id: Defined;
      name: Defined;
      description: Defined;
      icon: Defined;
      image: Defined;
      active: Defined;
      packageDescription: Defined;
      packageTitle: Defined;
      packageShortDescription: Defined;
      packageType: Defined;
      agencyId: Defined;
      productId: Defined;
      leftColor: Defined;
      rightColor: Defined;
      options: Defined;
    },
    PackageGroupBrand
  > => true,
  'PackageGroup',
);
export interface PackageGroupBrand {
  readonly PackageGroup: unique symbol;
}

export default PackageGroup;

// Success
