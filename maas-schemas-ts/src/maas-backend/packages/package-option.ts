/*

undefined
MaaS package option schema

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as Cost_ from '../../core/components/cost';
import * as Units_ from '../../core/components/units';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export const schemaId = 'http://maasglobal.com/maas-backend/packages/package-option.json';

// Balance
// Package balance
export type Balance = t.Branded<
  {
    amount?: number;
    tokenId?: string;
    tokenUnit?: string;
    currency?: string;
    ttl?: number;
    hidden?: boolean;
  } & {
    amount: Defined;
    tokenUnit: Defined;
    tokenId: Defined;
    currency: Defined;
    hidden: Defined;
  },
  BalanceBrand
>;
export type BalanceC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        amount: t.NumberC;
        tokenId: t.StringC;
        tokenUnit: t.StringC;
        currency: t.StringC;
        ttl: t.NumberC;
        hidden: t.BooleanC;
      }>,
      t.TypeC<{
        amount: typeof Defined;
        tokenUnit: typeof Defined;
        tokenId: typeof Defined;
        currency: typeof Defined;
        hidden: typeof Defined;
      }>,
    ]
  >,
  BalanceBrand
>;
export const Balance: BalanceC = t.brand(
  t.intersection([
    t.partial({
      amount: t.number,
      tokenId: t.string,
      tokenUnit: t.string,
      currency: t.string,
      ttl: t.number,
      hidden: t.boolean,
    }),
    t.type({
      amount: Defined,
      tokenUnit: Defined,
      tokenId: Defined,
      currency: Defined,
      hidden: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      amount?: number;
      tokenId?: string;
      tokenUnit?: string;
      currency?: string;
      ttl?: number;
      hidden?: boolean;
    } & {
      amount: Defined;
      tokenUnit: Defined;
      tokenId: Defined;
      currency: Defined;
      hidden: Defined;
    },
    BalanceBrand
  > => true,
  'Balance',
);
export interface BalanceBrand {
  readonly Balance: unique symbol;
}

// Price
// The purpose of this remains a mystery
export type Price = t.Branded<Cost_.Cost, PriceBrand>;
export type PriceC = t.BrandC<typeof Cost_.Cost, PriceBrand>;
export const Price: PriceC = t.brand(
  Cost_.Cost,
  (x): x is t.Branded<Cost_.Cost, PriceBrand> => true,
  'Price',
);
export interface PriceBrand {
  readonly Price: unique symbol;
}

// PackageOption
// The default export. More information at the top.
export type PackageOption = t.Branded<
  {
    id?: string;
    active?: boolean;
    hidden?: boolean;
    unitPrice?: Price;
    name?: string;
    description?: string;
    image?: Units_.Url;
    balances?: Array<Balance>;
  } & {
    id: Defined;
    active: Defined;
    hidden: Defined;
    unitPrice: Defined;
    name: Defined;
    description: Defined;
    image: Defined;
    balances: Defined;
  },
  PackageOptionBrand
>;
export type PackageOptionC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        id: t.StringC;
        active: t.BooleanC;
        hidden: t.BooleanC;
        unitPrice: typeof Price;
        name: t.StringC;
        description: t.StringC;
        image: typeof Units_.Url;
        balances: t.ArrayC<typeof Balance>;
      }>,
      t.TypeC<{
        id: typeof Defined;
        active: typeof Defined;
        hidden: typeof Defined;
        unitPrice: typeof Defined;
        name: typeof Defined;
        description: typeof Defined;
        image: typeof Defined;
        balances: typeof Defined;
      }>,
    ]
  >,
  PackageOptionBrand
>;
export const PackageOption: PackageOptionC = t.brand(
  t.intersection([
    t.partial({
      id: t.string,
      active: t.boolean,
      hidden: t.boolean,
      unitPrice: Price,
      name: t.string,
      description: t.string,
      image: Units_.Url,
      balances: t.array(Balance),
    }),
    t.type({
      id: Defined,
      active: Defined,
      hidden: Defined,
      unitPrice: Defined,
      name: Defined,
      description: Defined,
      image: Defined,
      balances: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      id?: string;
      active?: boolean;
      hidden?: boolean;
      unitPrice?: Price;
      name?: string;
      description?: string;
      image?: Units_.Url;
      balances?: Array<Balance>;
    } & {
      id: Defined;
      active: Defined;
      hidden: Defined;
      unitPrice: Defined;
      name: Defined;
      description: Defined;
      image: Defined;
      balances: Defined;
    },
    PackageOptionBrand
  > => true,
  'PackageOption',
);
export interface PackageOptionBrand {
  readonly PackageOption: unique symbol;
}

export default PackageOption;

// Success
