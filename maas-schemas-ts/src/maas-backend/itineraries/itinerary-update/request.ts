/*

undefined
Maas Itinerary update request

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';
import * as Units_ from 'maas-schemas-ts/core/components/units';
import * as Itinerary_ from 'maas-schemas-ts/core/itinerary';
import * as ApiCommon_ from 'maas-schemas-ts/core/components/api-common';
import * as Common_ from 'maas-schemas-ts/core/components/common';
import * as ProductOption_ from 'maas-schemas-ts/core/product-option';
import * as CustomerSelection_ from 'maas-schemas-ts/core/components/customerSelection';

type Defined =
  | Record<string, unknown>
  | Array<unknown>
  | string
  | boolean
  | number
  | null;
const Defined = t.union([
  t.UnknownRecord,
  t.UnknownArray,
  t.string,
  t.boolean,
  t.number,
  t.null,
]);

export const schemaId =
  'http://maasglobal.com/maas-backend/itineraries/itinerary-update/request.json';

// Default
// The default export. More information at the top.
export type Default = t.Branded<
  {
    identityId?: Units_.IdentityId;
    itineraryId?: Itinerary_.Id;
    headers?: ApiCommon_.Headers;
    payload?: {
      paymentSourceId?: Common_.PaymentSourceId;
      itinerary?: Itinerary_.Default;
      customerSelections?: Array<{
        ref?: ProductOption_.Ref;
        customerSelection?: CustomerSelection_.Default;
      }>;
    } & {
      itinerary: Defined;
      customerSelections: Defined;
    };
  },
  DefaultBrand
>;
export const Default = t.brand(
  t.partial({
    identityId: Units_.IdentityId,
    itineraryId: Itinerary_.Id,
    headers: ApiCommon_.Headers,
    payload: t.intersection([
      t.partial({
        paymentSourceId: Common_.PaymentSourceId,
        itinerary: Itinerary_.Default,
        customerSelections: t.array(
          t.partial({
            ref: ProductOption_.Ref,
            customerSelection: CustomerSelection_.Default,
          }),
        ),
      }),
      t.type({
        itinerary: Defined,
        customerSelections: Defined,
      }),
    ]),
  }),
  (
    x,
  ): x is t.Branded<
    {
      identityId?: Units_.IdentityId;
      itineraryId?: Itinerary_.Id;
      headers?: ApiCommon_.Headers;
      payload?: {
        paymentSourceId?: Common_.PaymentSourceId;
        itinerary?: Itinerary_.Default;
        customerSelections?: Array<{
          ref?: ProductOption_.Ref;
          customerSelection?: CustomerSelection_.Default;
        }>;
      } & {
        itinerary: Defined;
        customerSelections: Defined;
      };
    },
    DefaultBrand
  > => true,
  'Default',
);
export interface DefaultBrand {
  readonly Default: unique symbol;
}

export default Default;

// Success
