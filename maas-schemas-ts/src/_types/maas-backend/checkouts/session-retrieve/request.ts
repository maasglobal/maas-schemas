/*

undefined
MaaS customer benefits initiate

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as Units_ from '../../../core/components/units';
import * as State_ from '../../../core/components/state';
import * as BenefitProvider_ from '../../../core/components/benefit-provider';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export const schemaId =
  'https://schemas.maas.global/maas-backend/checkouts/session-retrieve/request.json';

// Response
// The default export. More information at the top.
export type Response = t.Branded<
  {
    id?: Units_.Url;
    state?: State_.CheckoutSessionState;
    identityId?: Units_.IdentityId;
    checkoutProviderId?: BenefitProvider_.BenefitsProviderId;
    amount?: number;
    currency?: Units_.Currency;
    productType?: string & ('product' | 'subscription' | 'package');
    productId?: string;
  } & {
    id: Defined;
    state: Defined;
    identityId: Defined;
    checkoutProviderId: Defined;
    amount: Defined;
    currency: Defined;
    productType: Defined;
    productId: Defined;
  },
  ResponseBrand
>;
export type ResponseC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        id: typeof Units_.Url;
        state: typeof State_.CheckoutSessionState;
        identityId: typeof Units_.IdentityId;
        checkoutProviderId: typeof BenefitProvider_.BenefitsProviderId;
        amount: t.NumberC;
        currency: typeof Units_.Currency;
        productType: t.IntersectionC<
          [
            t.StringC,
            t.UnionC<
              [t.LiteralC<'product'>, t.LiteralC<'subscription'>, t.LiteralC<'package'>]
            >,
          ]
        >;
        productId: t.StringC;
      }>,
      t.TypeC<{
        id: typeof Defined;
        state: typeof Defined;
        identityId: typeof Defined;
        checkoutProviderId: typeof Defined;
        amount: typeof Defined;
        currency: typeof Defined;
        productType: typeof Defined;
        productId: typeof Defined;
      }>,
    ]
  >,
  ResponseBrand
>;
export const Response: ResponseC = t.brand(
  t.intersection([
    t.partial({
      id: Units_.Url,
      state: State_.CheckoutSessionState,
      identityId: Units_.IdentityId,
      checkoutProviderId: BenefitProvider_.BenefitsProviderId,
      amount: t.number,
      currency: Units_.Currency,
      productType: t.intersection([
        t.string,
        t.union([t.literal('product'), t.literal('subscription'), t.literal('package')]),
      ]),
      productId: t.string,
    }),
    t.type({
      id: Defined,
      state: Defined,
      identityId: Defined,
      checkoutProviderId: Defined,
      amount: Defined,
      currency: Defined,
      productType: Defined,
      productId: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      id?: Units_.Url;
      state?: State_.CheckoutSessionState;
      identityId?: Units_.IdentityId;
      checkoutProviderId?: BenefitProvider_.BenefitsProviderId;
      amount?: number;
      currency?: Units_.Currency;
      productType?: string & ('product' | 'subscription' | 'package');
      productId?: string;
    } & {
      id: Defined;
      state: Defined;
      identityId: Defined;
      checkoutProviderId: Defined;
      amount: Defined;
      currency: Defined;
      productType: Defined;
      productId: Defined;
    },
    ResponseBrand
  > => true,
  'Response',
);
export interface ResponseBrand {
  readonly Response: unique symbol;
}

export default Response;

// Success
