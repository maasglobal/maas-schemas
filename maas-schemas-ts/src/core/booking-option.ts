/*

undefined
MaaS single TSP adapter option

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';
import * as Terms_ from 'maas-schemas-ts/core/components/terms';
import * as BookingMeta_ from 'maas-schemas-ts/core/booking-meta';
import * as Cost_ from 'maas-schemas-ts/core/components/cost';
import * as Configurator_ from 'maas-schemas-ts/core/components/configurator';
import * as Customer_ from 'maas-schemas-ts/core/customer';
import * as TravelMode_ from 'maas-schemas-ts/core/components/travel-mode';
import * as Units_ from 'maas-schemas-ts/core/components/units';
import * as Place_ from 'maas-schemas-ts/core/components/place';
import * as Common_ from 'maas-schemas-ts/core/components/common';

type Defined =
  | Record<string, unknown>
  | Array<unknown>
  | string
  | boolean
  | number
  | null;
const Defined = t.union([
  t.UnknownRecord,
  t.UnknownArray,
  t.string,
  t.boolean,
  t.number,
  t.null,
]);

export const schemaId = 'http://maasglobal.com/core/booking-option.json';

// Leg
// A subset of the standard leg (../core/leg.json)
export type Leg = t.Branded<
  {
    mode?: TravelMode_.Default;
    startTime?: Units_.Time;
    endTime?: Units_.Time;
    from?: Place_.Default;
    to?: Place_.Default;
    departureDelay?: Units_.Duration;
    agencyId?: Common_.AgencyId;
  } & {
    mode: Defined;
    startTime: Defined;
    endTime: Defined;
    from: Defined;
    to: Defined;
  },
  LegBrand
>;
export const Leg = t.brand(
  t.intersection([
    t.partial({
      mode: TravelMode_.Default,
      startTime: Units_.Time,
      endTime: Units_.Time,
      from: Place_.Default,
      to: Place_.Default,
      departureDelay: Units_.Duration,
      agencyId: Common_.AgencyId,
    }),
    t.type({
      mode: Defined,
      startTime: Defined,
      endTime: Defined,
      from: Defined,
      to: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      mode?: TravelMode_.Default;
      startTime?: Units_.Time;
      endTime?: Units_.Time;
      from?: Place_.Default;
      to?: Place_.Default;
      departureDelay?: Units_.Duration;
      agencyId?: Common_.AgencyId;
    } & {
      mode: Defined;
      startTime: Defined;
      endTime: Defined;
      from: Defined;
      to: Defined;
    },
    LegBrand
  > => true,
  'Leg',
);
export interface LegBrand {
  readonly Leg: unique symbol;
}

// TspProduct
// Defines what kind of TSP product the booking option represents.
export type TspProduct = t.Branded<
  {
    id?: string;
  } & {
    id: Defined;
  },
  TspProductBrand
>;
export const TspProduct = t.brand(
  t.intersection([
    t.partial({
      id: t.string,
    }),
    t.type({
      id: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      id?: string;
    } & {
      id: Defined;
    },
    TspProductBrand
  > => true,
  'TspProduct',
);
export interface TspProductBrand {
  readonly TspProduct: unique symbol;
}

// Customer
// The purpose of this remains a mystery
export type Customer = Customer_.Default;
export const Customer = Customer_.Default;

// ContentWithCost
// The purpose of this remains a mystery
export type ContentWithCost = t.Branded<
  {
    leg?: Leg;
    terms?: Terms_.Default;
    meta?: BookingMeta_.Default;
    tspProduct?: TspProduct;
    cost?: Cost_.Default;
    customer?: Customer;
  } & {
    leg: Defined;
    meta: Defined;
    terms: Defined;
    tspProduct: Defined;
    cost: Defined;
  },
  ContentWithCostBrand
>;
export const ContentWithCost = t.brand(
  t.intersection([
    t.partial({
      leg: Leg,
      terms: Terms_.Default,
      meta: BookingMeta_.Default,
      tspProduct: TspProduct,
      cost: Cost_.Default,
      customer: Customer,
    }),
    t.type({
      leg: Defined,
      meta: Defined,
      terms: Defined,
      tspProduct: Defined,
      cost: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      leg?: Leg;
      terms?: Terms_.Default;
      meta?: BookingMeta_.Default;
      tspProduct?: TspProduct;
      cost?: Cost_.Default;
      customer?: Customer;
    } & {
      leg: Defined;
      meta: Defined;
      terms: Defined;
      tspProduct: Defined;
      cost: Defined;
    },
    ContentWithCostBrand
  > => true,
  'ContentWithCost',
);
export interface ContentWithCostBrand {
  readonly ContentWithCost: unique symbol;
}

// ContentWithConfigurator
// The purpose of this remains a mystery
export type ContentWithConfigurator = t.Branded<
  {
    leg?: Leg;
    terms?: Terms_.Default;
    meta?: BookingMeta_.Default;
    tspProduct?: TspProduct;
    configurator?: Configurator_.Default;
    customer?: Customer;
  } & {
    leg: Defined;
    meta: Defined;
    terms: Defined;
    tspProduct: Defined;
    configurator: Defined;
  },
  ContentWithConfiguratorBrand
>;
export const ContentWithConfigurator = t.brand(
  t.intersection([
    t.partial({
      leg: Leg,
      terms: Terms_.Default,
      meta: BookingMeta_.Default,
      tspProduct: TspProduct,
      configurator: Configurator_.Default,
      customer: Customer,
    }),
    t.type({
      leg: Defined,
      meta: Defined,
      terms: Defined,
      tspProduct: Defined,
      configurator: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      leg?: Leg;
      terms?: Terms_.Default;
      meta?: BookingMeta_.Default;
      tspProduct?: TspProduct;
      configurator?: Configurator_.Default;
      customer?: Customer;
    } & {
      leg: Defined;
      meta: Defined;
      terms: Defined;
      tspProduct: Defined;
      configurator: Defined;
    },
    ContentWithConfiguratorBrand
  > => true,
  'ContentWithConfigurator',
);
export interface ContentWithConfiguratorBrand {
  readonly ContentWithConfigurator: unique symbol;
}

// LegDelta
// A leg delta, containing any subset of the valid properties
export type LegDelta = t.Branded<
  {
    mode?: TravelMode_.Default;
    startTime?: Units_.Time;
    endTime?: Units_.Time;
    departureDelay?: Units_.Duration;
    from?: Place_.Default;
    to?: Place_.Default;
  },
  LegDeltaBrand
>;
export const LegDelta = t.brand(
  t.partial({
    mode: TravelMode_.Default,
    startTime: Units_.Time,
    endTime: Units_.Time,
    departureDelay: Units_.Duration,
    from: Place_.Default,
    to: Place_.Default,
  }),
  (
    x,
  ): x is t.Branded<
    {
      mode?: TravelMode_.Default;
      startTime?: Units_.Time;
      endTime?: Units_.Time;
      departureDelay?: Units_.Duration;
      from?: Place_.Default;
      to?: Place_.Default;
    },
    LegDeltaBrand
  > => true,
  'LegDelta',
);
export interface LegDeltaBrand {
  readonly LegDelta: unique symbol;
}

// Default
// The default export. More information at the top.
export type Default = t.Branded<ContentWithCost | ContentWithConfigurator, DefaultBrand>;
export const Default = t.brand(
  t.union([ContentWithCost, ContentWithConfigurator]),
  (x): x is t.Branded<ContentWithCost | ContentWithConfigurator, DefaultBrand> => true,
  'Default',
);
export interface DefaultBrand {
  readonly Default: unique symbol;
}

export default Default;

// Success
