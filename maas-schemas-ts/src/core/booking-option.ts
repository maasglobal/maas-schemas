/*

undefined
MaaS single TSP adapter option

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as Terms_ from './components/terms';
import * as BookingMeta_ from './booking-meta';
import * as Cost_ from './components/cost';
import * as Configurator_ from './components/configurator';
import * as Customer_ from './customer';
import * as TravelMode_ from './components/travel-mode';
import * as Units_ from './components/units';
import * as Place_ from './components/place';
import * as Common_ from './components/common';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export const schemaId = 'http://maasglobal.com/core/booking-option.json';

// Leg
// A subset of the standard leg (../core/leg.json)
export type Leg = t.Branded<
  {
    mode?: TravelMode_.TravelMode;
    startTime?: Units_.Time;
    endTime?: Units_.Time;
    from?: Place_.Place;
    to?: Place_.Place;
    departureDelay?: Units_.Duration;
    agencyId?: Common_.AgencyId;
  } & {
    mode: Defined;
    startTime: Defined;
    endTime: Defined;
    from: Defined;
    to: Defined;
  },
  LegBrand
>;
export type LegC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        mode: typeof TravelMode_.TravelMode;
        startTime: typeof Units_.Time;
        endTime: typeof Units_.Time;
        from: typeof Place_.Place;
        to: typeof Place_.Place;
        departureDelay: typeof Units_.Duration;
        agencyId: typeof Common_.AgencyId;
      }>,
      t.TypeC<{
        mode: typeof Defined;
        startTime: typeof Defined;
        endTime: typeof Defined;
        from: typeof Defined;
        to: typeof Defined;
      }>,
    ]
  >,
  LegBrand
>;
export const Leg: LegC = t.brand(
  t.intersection([
    t.partial({
      mode: TravelMode_.TravelMode,
      startTime: Units_.Time,
      endTime: Units_.Time,
      from: Place_.Place,
      to: Place_.Place,
      departureDelay: Units_.Duration,
      agencyId: Common_.AgencyId,
    }),
    t.type({
      mode: Defined,
      startTime: Defined,
      endTime: Defined,
      from: Defined,
      to: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      mode?: TravelMode_.TravelMode;
      startTime?: Units_.Time;
      endTime?: Units_.Time;
      from?: Place_.Place;
      to?: Place_.Place;
      departureDelay?: Units_.Duration;
      agencyId?: Common_.AgencyId;
    } & {
      mode: Defined;
      startTime: Defined;
      endTime: Defined;
      from: Defined;
      to: Defined;
    },
    LegBrand
  > => true,
  'Leg',
);
export interface LegBrand {
  readonly Leg: unique symbol;
}

// TspProduct
// Defines what kind of TSP product the booking option represents.
export type TspProduct = t.Branded<
  {
    id?: string;
    name?: string;
  } & {
    id: Defined;
  },
  TspProductBrand
>;
export type TspProductC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        id: t.StringC;
        name: t.StringC;
      }>,
      t.TypeC<{
        id: typeof Defined;
      }>,
    ]
  >,
  TspProductBrand
>;
export const TspProduct: TspProductC = t.brand(
  t.intersection([
    t.partial({
      id: t.string,
      name: t.string,
    }),
    t.type({
      id: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      id?: string;
      name?: string;
    } & {
      id: Defined;
    },
    TspProductBrand
  > => true,
  'TspProduct',
);
export interface TspProductBrand {
  readonly TspProduct: unique symbol;
}

// Customer
// MaaS booking customer
export type Customer = t.Branded<Customer_.Customer, CustomerBrand>;
export type CustomerC = t.BrandC<typeof Customer_.Customer, CustomerBrand>;
export const Customer: CustomerC = t.brand(
  Customer_.Customer,
  (x): x is t.Branded<Customer_.Customer, CustomerBrand> => true,
  'Customer',
);
export interface CustomerBrand {
  readonly Customer: unique symbol;
}

// ContentWithCost
// The purpose of this remains a mystery
export type ContentWithCost = t.Branded<
  {
    leg?: Leg;
    terms?: Terms_.Terms;
    meta?: BookingMeta_.BookingMeta;
    tspProduct?: TspProduct;
    cost?: Cost_.Cost;
    customer?: Customer;
  } & {
    leg: Defined;
    meta: Defined;
    terms: Defined;
    tspProduct: Defined;
    cost: Defined;
  },
  ContentWithCostBrand
>;
export type ContentWithCostC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        leg: typeof Leg;
        terms: typeof Terms_.Terms;
        meta: typeof BookingMeta_.BookingMeta;
        tspProduct: typeof TspProduct;
        cost: typeof Cost_.Cost;
        customer: typeof Customer;
      }>,
      t.TypeC<{
        leg: typeof Defined;
        meta: typeof Defined;
        terms: typeof Defined;
        tspProduct: typeof Defined;
        cost: typeof Defined;
      }>,
    ]
  >,
  ContentWithCostBrand
>;
export const ContentWithCost: ContentWithCostC = t.brand(
  t.intersection([
    t.partial({
      leg: Leg,
      terms: Terms_.Terms,
      meta: BookingMeta_.BookingMeta,
      tspProduct: TspProduct,
      cost: Cost_.Cost,
      customer: Customer,
    }),
    t.type({
      leg: Defined,
      meta: Defined,
      terms: Defined,
      tspProduct: Defined,
      cost: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      leg?: Leg;
      terms?: Terms_.Terms;
      meta?: BookingMeta_.BookingMeta;
      tspProduct?: TspProduct;
      cost?: Cost_.Cost;
      customer?: Customer;
    } & {
      leg: Defined;
      meta: Defined;
      terms: Defined;
      tspProduct: Defined;
      cost: Defined;
    },
    ContentWithCostBrand
  > => true,
  'ContentWithCost',
);
export interface ContentWithCostBrand {
  readonly ContentWithCost: unique symbol;
}

// ContentWithConfigurator
// The purpose of this remains a mystery
export type ContentWithConfigurator = t.Branded<
  {
    leg?: Leg;
    terms?: Terms_.Terms;
    meta?: BookingMeta_.BookingMeta;
    tspProduct?: TspProduct;
    configurator?: Configurator_.Configurator;
    customer?: Customer;
  } & {
    leg: Defined;
    meta: Defined;
    terms: Defined;
    tspProduct: Defined;
    configurator: Defined;
  },
  ContentWithConfiguratorBrand
>;
export type ContentWithConfiguratorC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        leg: typeof Leg;
        terms: typeof Terms_.Terms;
        meta: typeof BookingMeta_.BookingMeta;
        tspProduct: typeof TspProduct;
        configurator: typeof Configurator_.Configurator;
        customer: typeof Customer;
      }>,
      t.TypeC<{
        leg: typeof Defined;
        meta: typeof Defined;
        terms: typeof Defined;
        tspProduct: typeof Defined;
        configurator: typeof Defined;
      }>,
    ]
  >,
  ContentWithConfiguratorBrand
>;
export const ContentWithConfigurator: ContentWithConfiguratorC = t.brand(
  t.intersection([
    t.partial({
      leg: Leg,
      terms: Terms_.Terms,
      meta: BookingMeta_.BookingMeta,
      tspProduct: TspProduct,
      configurator: Configurator_.Configurator,
      customer: Customer,
    }),
    t.type({
      leg: Defined,
      meta: Defined,
      terms: Defined,
      tspProduct: Defined,
      configurator: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      leg?: Leg;
      terms?: Terms_.Terms;
      meta?: BookingMeta_.BookingMeta;
      tspProduct?: TspProduct;
      configurator?: Configurator_.Configurator;
      customer?: Customer;
    } & {
      leg: Defined;
      meta: Defined;
      terms: Defined;
      tspProduct: Defined;
      configurator: Defined;
    },
    ContentWithConfiguratorBrand
  > => true,
  'ContentWithConfigurator',
);
export interface ContentWithConfiguratorBrand {
  readonly ContentWithConfigurator: unique symbol;
}

// LegDelta
// A leg delta, containing any subset of the valid properties
export type LegDelta = t.Branded<
  {
    mode?: TravelMode_.TravelMode;
    startTime?: Units_.Time;
    endTime?: Units_.Time;
    departureDelay?: Units_.Duration;
    from?: Place_.Place;
    to?: Place_.Place;
  },
  LegDeltaBrand
>;
export type LegDeltaC = t.BrandC<
  t.PartialC<{
    mode: typeof TravelMode_.TravelMode;
    startTime: typeof Units_.Time;
    endTime: typeof Units_.Time;
    departureDelay: typeof Units_.Duration;
    from: typeof Place_.Place;
    to: typeof Place_.Place;
  }>,
  LegDeltaBrand
>;
export const LegDelta: LegDeltaC = t.brand(
  t.partial({
    mode: TravelMode_.TravelMode,
    startTime: Units_.Time,
    endTime: Units_.Time,
    departureDelay: Units_.Duration,
    from: Place_.Place,
    to: Place_.Place,
  }),
  (
    x,
  ): x is t.Branded<
    {
      mode?: TravelMode_.TravelMode;
      startTime?: Units_.Time;
      endTime?: Units_.Time;
      departureDelay?: Units_.Duration;
      from?: Place_.Place;
      to?: Place_.Place;
    },
    LegDeltaBrand
  > => true,
  'LegDelta',
);
export interface LegDeltaBrand {
  readonly LegDelta: unique symbol;
}

// BookingOption
// The default export. More information at the top.
export type BookingOption = t.Branded<
  ContentWithCost | ContentWithConfigurator,
  BookingOptionBrand
>;
export type BookingOptionC = t.BrandC<
  t.UnionC<[typeof ContentWithCost, typeof ContentWithConfigurator]>,
  BookingOptionBrand
>;
export const BookingOption: BookingOptionC = t.brand(
  t.union([ContentWithCost, ContentWithConfigurator]),
  (x): x is t.Branded<ContentWithCost | ContentWithConfigurator, BookingOptionBrand> =>
    true,
  'BookingOption',
);
export interface BookingOptionBrand {
  readonly BookingOption: unique symbol;
}

export default BookingOption;

// Success
