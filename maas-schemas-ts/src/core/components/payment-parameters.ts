/*

undefined
MaaS payment parameters for completing booking payment

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';
import * as Units_ from 'maas-schemas-ts/core/components/units';

export const schemaId = 'http://maasglobal.com/core/components/payment-parameters.json';

// StripePaymentParameters
// The purpose of this remains a mystery
export type StripePaymentParameters = t.Branded<
  {
    bookingId?: Units_.Uuid;
    clientSecret?: string;
  },
  StripePaymentParametersBrand
>;
export const StripePaymentParameters = t.brand(
  t.partial({
    bookingId: Units_.Uuid,
    clientSecret: t.string,
  }),
  (
    x,
  ): x is t.Branded<
    {
      bookingId?: Units_.Uuid;
      clientSecret?: string;
    },
    StripePaymentParametersBrand
  > => true,
  'StripePaymentParameters',
);
export interface StripePaymentParametersBrand {
  readonly StripePaymentParameters: unique symbol;
}

// AvainpayPaymentParameters
// The purpose of this remains a mystery
export type AvainpayPaymentParameters = t.Branded<
  | {
      return_code?: string;
      appid?: string;
      sub_appid?: string;
      mch_id?: string;
      sub_mch_id?: string;
      nonce_str?: string;
      result_code?: string;
      prepay_id?: string;
      trade_type?: string;
      code_url?: string;
      sign?: string;
      paySign?: string;
      timeStamp?: string;
    }
  | {
      appId?: string;
      timeStamp?: string;
      nonceStr?: string;
      package?: string;
      signType?: string;
      paySign?: string;
    }
  | {
      return_code?: string;
      appid?: string;
      mch_id?: string;
      sub_mch_id?: string;
      nonce_str?: string;
      result_code?: string;
      prepay_id?: string;
      trade_type?: string;
      code_url?: string;
      sign?: string;
    },
  AvainpayPaymentParametersBrand
>;
export const AvainpayPaymentParameters = t.brand(
  t.union([
    t.partial({
      return_code: t.string,
      appid: t.string,
      sub_appid: t.string,
      mch_id: t.string,
      sub_mch_id: t.string,
      nonce_str: t.string,
      result_code: t.string,
      prepay_id: t.string,
      trade_type: t.string,
      code_url: t.string,
      sign: t.string,
      paySign: t.string,
      timeStamp: t.string,
    }),
    t.partial({
      appId: t.string,
      timeStamp: t.string,
      nonceStr: t.string,
      package: t.string,
      signType: t.string,
      paySign: t.string,
    }),
    t.partial({
      return_code: t.string,
      appid: t.string,
      mch_id: t.string,
      sub_mch_id: t.string,
      nonce_str: t.string,
      result_code: t.string,
      prepay_id: t.string,
      trade_type: t.string,
      code_url: t.string,
      sign: t.string,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    | {
        return_code?: string;
        appid?: string;
        sub_appid?: string;
        mch_id?: string;
        sub_mch_id?: string;
        nonce_str?: string;
        result_code?: string;
        prepay_id?: string;
        trade_type?: string;
        code_url?: string;
        sign?: string;
        paySign?: string;
        timeStamp?: string;
      }
    | {
        appId?: string;
        timeStamp?: string;
        nonceStr?: string;
        package?: string;
        signType?: string;
        paySign?: string;
      }
    | {
        return_code?: string;
        appid?: string;
        mch_id?: string;
        sub_mch_id?: string;
        nonce_str?: string;
        result_code?: string;
        prepay_id?: string;
        trade_type?: string;
        code_url?: string;
        sign?: string;
      },
    AvainpayPaymentParametersBrand
  > => true,
  'AvainpayPaymentParameters',
);
export interface AvainpayPaymentParametersBrand {
  readonly AvainpayPaymentParameters: unique symbol;
}

// Default
// The default export. More information at the top.
export type Default = t.Branded<unknown, DefaultBrand>;
export const Default = t.brand(
  t.unknown,
  (x): x is t.Branded<unknown, DefaultBrand> => true,
  'Default',
);
export interface DefaultBrand {
  readonly Default: unique symbol;
}

export default Default;

// Success
