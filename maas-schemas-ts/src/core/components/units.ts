/*

undefined
MaaS common units that are used consistently within our own objects

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import { NonEmptyArray } from 'fp-ts/lib/NonEmptyArray';
import { nonEmptyArray } from 'io-ts-types/lib/nonEmptyArray';

export const schemaId = 'http://maasglobal.com/core/components/units.json';

// Uuid
// Universally unique identifier, see https://en.wikipedia.org/wiki/Universally_unique_identifier
export type Uuid = t.Branded<string, UuidBrand>;
export type UuidC = t.BrandC<t.StringC, UuidBrand>;
export const Uuid: UuidC = t.brand(
  t.string,
  (x): x is t.Branded<string, UuidBrand> =>
    typeof x !== 'string' ||
    x.match(RegExp('^[A-Fa-f0-9]{8}(-[A-Fa-f0-9]{4}){3}-[A-Fa-f0-9]{12}$')) !== null,
  'Uuid',
);
export interface UuidBrand {
  readonly Uuid: unique symbol;
}
/** require('io-ts-validator').validator(nonEmptyArray(Uuid)).decodeSync(examplesUuid) // => examplesUuid */
export const examplesUuid: NonEmptyArray<Uuid> = ([
  '4828507e-683f-41bf-9d87-689808fbf958',
] as unknown) as NonEmptyArray<Uuid>;

// HostnameLabel
// single component of a hostname
export type HostnameLabel = t.Branded<string, HostnameLabelBrand>;
export type HostnameLabelC = t.BrandC<t.StringC, HostnameLabelBrand>;
export const HostnameLabel: HostnameLabelC = t.brand(
  t.string,
  (x): x is t.Branded<string, HostnameLabelBrand> =>
    (typeof x !== 'string' ||
      x.match(RegExp('^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$')) !== null) &&
    (typeof x !== 'string' || x.length >= 1) &&
    (typeof x !== 'string' || x.length <= 63),
  'HostnameLabel',
);
export interface HostnameLabelBrand {
  readonly HostnameLabel: unique symbol;
}
/** require('io-ts-validator').validator(nonEmptyArray(HostnameLabel)).decodeSync(examplesHostnameLabel) // => examplesHostnameLabel */
export const examplesHostnameLabel: NonEmptyArray<HostnameLabel> = ([
  'example',
  'com',
  'with-hyphen',
  'foo1',
  '0bar',
] as unknown) as NonEmptyArray<HostnameLabel>;

// Hostname
// list of 1 or more hostname labels separated by dot
export type Hostname = t.Branded<string, HostnameBrand>;
export type HostnameC = t.BrandC<t.StringC, HostnameBrand>;
export const Hostname: HostnameC = t.brand(
  t.string,
  (x): x is t.Branded<string, HostnameBrand> =>
    (typeof x !== 'string' ||
      x.match(
        RegExp(
          '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?(.[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?)*$',
        ),
      ) !== null) &&
    (typeof x !== 'string' || x.length >= 1) &&
    (typeof x !== 'string' || x.length <= 253),
  'Hostname',
);
export interface HostnameBrand {
  readonly Hostname: unique symbol;
}
/** require('io-ts-validator').validator(nonEmptyArray(Hostname)).decodeSync(examplesHostname) // => examplesHostname */
export const examplesHostname: NonEmptyArray<Hostname> = ([
  'localhost',
  'example.com',
  'sub.example.com',
] as unknown) as NonEmptyArray<Hostname>;

// Url
// Uniform resource locator, see https://en.wikipedia.org/wiki/Uniform_Resource_Locator and https://mathiasbynens.be/demo/url-regex
export type Url = t.Branded<string, UrlBrand>;
export type UrlC = t.BrandC<t.StringC, UrlBrand>;
export const Url: UrlC = t.brand(
  t.string,
  (x): x is t.Branded<string, UrlBrand> =>
    typeof x !== 'string' ||
    x.match(RegExp('^(https?|ftp):\\/\\/[^\\s/$.?#].[^\\s]*$')) !== null,
  'Url',
);
export interface UrlBrand {
  readonly Url: unique symbol;
}

// Arn
// The purpose of this remains a mystery
export type Arn = t.Branded<string, ArnBrand>;
export type ArnC = t.BrandC<t.StringC, ArnBrand>;
export const Arn: ArnC = t.brand(
  t.string,
  (x): x is t.Branded<string, ArnBrand> =>
    (typeof x !== 'string' ||
      x.match(
        RegExp('^arn:aws:[a-z]+:[\\w\\-]*:\\d{12}:[ \\w\\-]+(\\/[\\w\\- \\/]+)*'),
      ) !== null) &&
    (typeof x !== 'string' || x.length >= 1) &&
    (typeof x !== 'string' || x.length <= 256),
  'Arn',
);
export interface ArnBrand {
  readonly Arn: unique symbol;
}

// ObsoleteIdentityId
// The purpose of this remains a mystery
export type ObsoleteIdentityId = t.Branded<string, ObsoleteIdentityIdBrand>;
export type ObsoleteIdentityIdC = t.BrandC<t.StringC, ObsoleteIdentityIdBrand>;
export const ObsoleteIdentityId: ObsoleteIdentityIdC = t.brand(
  t.string,
  (x): x is t.Branded<string, ObsoleteIdentityIdBrand> =>
    typeof x !== 'string' ||
    x.match(
      RegExp('^[aepus]{2}-[\\w]{4}-\\d:[a-f\\d]{8}(-[a-f\\d]{4}){3}-[a-f\\d]{12}$'),
    ) !== null,
  'ObsoleteIdentityId',
);
export interface ObsoleteIdentityIdBrand {
  readonly ObsoleteIdentityId: unique symbol;
}
/** require('io-ts-validator').validator(nonEmptyArray(ObsoleteIdentityId)).decodeSync(examplesObsoleteIdentityId) // => examplesObsoleteIdentityId */
export const examplesObsoleteIdentityId: NonEmptyArray<ObsoleteIdentityId> = ([
  'eu-west-1:4828507e-683f-41bf-9d87-689808fbf958',
] as unknown) as NonEmptyArray<ObsoleteIdentityId>;

// IdentityId
// The purpose of this remains a mystery
export type IdentityId = t.Branded<ObsoleteIdentityId | Uuid, IdentityIdBrand>;
export type IdentityIdC = t.BrandC<
  t.UnionC<[typeof ObsoleteIdentityId, typeof Uuid]>,
  IdentityIdBrand
>;
export const IdentityId: IdentityIdC = t.brand(
  t.union([ObsoleteIdentityId, Uuid]),
  (x): x is t.Branded<ObsoleteIdentityId | Uuid, IdentityIdBrand> => true,
  'IdentityId',
);
export interface IdentityIdBrand {
  readonly IdentityId: unique symbol;
}
/** require('io-ts-validator').validator(nonEmptyArray(IdentityId)).decodeSync(examplesIdentityId) // => examplesIdentityId */
export const examplesIdentityId: NonEmptyArray<IdentityId> = ([
  'eu-west-1:4828507e-683f-41bf-9d87-689808fbf958',
  '4828507e-683f-41bf-9d87-689808fbf958',
] as unknown) as NonEmptyArray<IdentityId>;

// Currency
// Accepted monetary unit in ISO 4127 format, see https://en.wikipedia.org/wiki/ISO_4217#cite_note-1
export type Currency = t.Branded<
  string & ('EUR' | 'GBP' | 'SGD' | 'USD' | 'JPY' | 'CHF'),
  CurrencyBrand
>;
export type CurrencyC = t.BrandC<
  t.IntersectionC<
    [
      t.StringC,
      t.UnionC<
        [
          t.LiteralC<'EUR'>,
          t.LiteralC<'GBP'>,
          t.LiteralC<'SGD'>,
          t.LiteralC<'USD'>,
          t.LiteralC<'JPY'>,
          t.LiteralC<'CHF'>,
        ]
      >,
    ]
  >,
  CurrencyBrand
>;
export const Currency: CurrencyC = t.brand(
  t.intersection([
    t.string,
    t.union([
      t.literal('EUR'),
      t.literal('GBP'),
      t.literal('SGD'),
      t.literal('USD'),
      t.literal('JPY'),
      t.literal('CHF'),
    ]),
  ]),
  (
    x,
  ): x is t.Branded<
    string & ('EUR' | 'GBP' | 'SGD' | 'USD' | 'JPY' | 'CHF'),
    CurrencyBrand
  > => true,
  'Currency',
);
export interface CurrencyBrand {
  readonly Currency: unique symbol;
}

// Time
// POSIX time in milliseconds, https://en.wikipedia.org/wiki/Unix_time
export type Time = t.Branded<number, TimeBrand>;
export type TimeC = t.BrandC<t.NumberC, TimeBrand>;
export const Time: TimeC = t.brand(
  t.number,
  (x): x is t.Branded<number, TimeBrand> =>
    (typeof x !== 'number' || x >= 1451606400) &&
    (typeof x !== 'number' || x <= 9007199254740991) &&
    Number.isInteger(x),
  'Time',
);
export interface TimeBrand {
  readonly Time: unique symbol;
}

// Duration
// duration in milliseconds (negative values permitted), https://en.wikipedia.org/wiki/Unix_time
export type Duration = t.Branded<number, DurationBrand>;
export type DurationC = t.BrandC<t.NumberC, DurationBrand>;
export const Duration: DurationC = t.brand(
  t.number,
  (x): x is t.Branded<number, DurationBrand> =>
    (typeof x !== 'number' || x >= -9007199254740991) &&
    (typeof x !== 'number' || x <= 9007199254740991) &&
    Number.isInteger(x),
  'Duration',
);
export interface DurationBrand {
  readonly Duration: unique symbol;
}

// IsoDate
// A date in the form YYYY-MM-DD without a time component
export type IsoDate = t.Branded<string, IsoDateBrand>;
export type IsoDateC = t.BrandC<t.StringC, IsoDateBrand>;
export const IsoDate: IsoDateC = t.brand(
  t.string,
  (x): x is t.Branded<string, IsoDateBrand> =>
    typeof x !== 'string' || x.match(RegExp('^\\d{4}-\\d{2}-\\d{2}')) !== null,
  'IsoDate',
);
export interface IsoDateBrand {
  readonly IsoDate: unique symbol;
}

// IsoDateTime
// A date in the form YYYY-MM-DDTHH:MM:SS.mmmZ
export type IsoDateTime = t.Branded<string, IsoDateTimeBrand>;
export type IsoDateTimeC = t.BrandC<t.StringC, IsoDateTimeBrand>;
export const IsoDateTime: IsoDateTimeC = t.brand(
  t.string,
  (x): x is t.Branded<string, IsoDateTimeBrand> =>
    typeof x !== 'string' ||
    x.match(RegExp('^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z')) !== null,
  'IsoDateTime',
);
export interface IsoDateTimeBrand {
  readonly IsoDateTime: unique symbol;
}

// Units
// The default export. More information at the top.
export type Units = t.Branded<unknown, UnitsBrand>;
export type UnitsC = t.BrandC<t.UnknownC, UnitsBrand>;
export const Units: UnitsC = t.brand(
  t.unknown,
  (x): x is t.Branded<unknown, UnitsBrand> => true,
  'Units',
);
export interface UnitsBrand {
  readonly Units: unique symbol;
}

export default Units;

// Success
