/*

undefined
MaaS state schemas

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';

export const schemaId = 'http://maasglobal.com/core/components/state.json';

// BookingState
// The life-cycle state of a booking
export type BookingState = t.Branded<
  string &
    (
      | 'START'
      | 'PENDING'
      | 'PAID'
      | 'RESERVED'
      | 'CONFIRMED'
      | 'ARRIVED'
      | 'ACTIVATED'
      | 'ON_HOLD'
      | 'CANCELLED'
      | 'EXPIRED'
      | 'REJECTED'
      | 'FINISHED'
      | 'UNKNOWN'),
  BookingStateBrand
>;
export const BookingState = t.brand(
  t.intersection([
    t.string,
    t.union([
      t.literal('START'),
      t.literal('PENDING'),
      t.literal('PAID'),
      t.literal('RESERVED'),
      t.literal('CONFIRMED'),
      t.literal('ARRIVED'),
      t.literal('ACTIVATED'),
      t.literal('ON_HOLD'),
      t.literal('CANCELLED'),
      t.literal('EXPIRED'),
      t.literal('REJECTED'),
      t.literal('FINISHED'),
      t.literal('UNKNOWN'),
    ]),
  ]),
  (
    x,
  ): x is t.Branded<
    string &
      (
        | 'START'
        | 'PENDING'
        | 'PAID'
        | 'RESERVED'
        | 'CONFIRMED'
        | 'ARRIVED'
        | 'ACTIVATED'
        | 'ON_HOLD'
        | 'CANCELLED'
        | 'EXPIRED'
        | 'REJECTED'
        | 'FINISHED'
        | 'UNKNOWN'),
    BookingStateBrand
  > => true,
  'BookingState',
);
export interface BookingStateBrand {
  readonly BookingState: unique symbol;
}

// LegState
// The life-cycle state of a leg
export type LegState = t.Branded<
  string & ('START' | 'PLANNED' | 'PAID' | 'ACTIVATED' | 'CANCELLED' | 'FINISHED'),
  LegStateBrand
>;
export const LegState = t.brand(
  t.intersection([
    t.string,
    t.union([
      t.literal('START'),
      t.literal('PLANNED'),
      t.literal('PAID'),
      t.literal('ACTIVATED'),
      t.literal('CANCELLED'),
      t.literal('FINISHED'),
    ]),
  ]),
  (
    x,
  ): x is t.Branded<
    string & ('START' | 'PLANNED' | 'PAID' | 'ACTIVATED' | 'CANCELLED' | 'FINISHED'),
    LegStateBrand
  > => true,
  'LegState',
);
export interface LegStateBrand {
  readonly LegState: unique symbol;
}

// ItineraryState
// The life-cycle state of an itinerary
export type ItineraryState = t.Branded<
  string &
    (
      | 'START'
      | 'PLANNED'
      | 'PAID'
      | 'ACTIVATED'
      | 'CANCELLED'
      | 'CANCELLED_WITH_ERRORS'
      | 'FINISHED'),
  ItineraryStateBrand
>;
export const ItineraryState = t.brand(
  t.intersection([
    t.string,
    t.union([
      t.literal('START'),
      t.literal('PLANNED'),
      t.literal('PAID'),
      t.literal('ACTIVATED'),
      t.literal('CANCELLED'),
      t.literal('CANCELLED_WITH_ERRORS'),
      t.literal('FINISHED'),
    ]),
  ]),
  (
    x,
  ): x is t.Branded<
    string &
      (
        | 'START'
        | 'PLANNED'
        | 'PAID'
        | 'ACTIVATED'
        | 'CANCELLED'
        | 'CANCELLED_WITH_ERRORS'
        | 'FINISHED'),
    ItineraryStateBrand
  > => true,
  'ItineraryState',
);
export interface ItineraryStateBrand {
  readonly ItineraryState: unique symbol;
}

// Default
// The default export. More information at the top.
export type Default = t.Branded<unknown, DefaultBrand>;
export const Default = t.brand(
  t.unknown,
  (x): x is t.Branded<unknown, DefaultBrand> => true,
  'Default',
);
export interface DefaultBrand {
  readonly Default: unique symbol;
}

export default Default;

// Success
