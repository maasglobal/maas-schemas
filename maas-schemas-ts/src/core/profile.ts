/*

undefined
MaaS user profiles as returned by our API

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as Units_ from './components/units';
import * as PointCost_ from './components/point-cost';
import * as Common_ from './components/common';
import * as Address_ from './components/address';
import * as Region_ from './region';
import * as Place_ from './components/place';
import * as Fare_ from './components/fare';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export const schemaId = 'http://maasglobal.com/core/profile.json';

// BookingOptionsReference
// The purpose of this remains a mystery
export type BookingOptionsReference = t.Branded<number, BookingOptionsReferenceBrand>;
export type BookingOptionsReferenceC = t.BrandC<t.NumberC, BookingOptionsReferenceBrand>;
export const BookingOptionsReference: BookingOptionsReferenceC = t.brand(
  t.number,
  (x): x is t.Branded<number, BookingOptionsReferenceBrand> => Number.isInteger(x),
  'BookingOptionsReference',
);
export interface BookingOptionsReferenceBrand {
  readonly BookingOptionsReference: unique symbol;
}

// SubscriptionInstance
// The purpose of this remains a mystery
export type SubscriptionInstance = t.Branded<
  {
    id?: BookingOptionsReference | Units_.IdentityId;
    name?: string;
    plan?: {
      id?: string;
    } & {
      id: Defined;
    };
    addons?: Array<string>;
    coupons?: Array<string>;
    wmpGrant?: number;
    level?: number;
    active?: boolean;
    pointCost?: PointCost_.PointCost;
    description?: string;
    availability?: number;
  } & {
    plan: Defined;
    addons: Defined;
    coupons: Defined;
    pointCost: Defined;
  },
  SubscriptionInstanceBrand
>;
export type SubscriptionInstanceC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        id: t.UnionC<[typeof BookingOptionsReference, typeof Units_.IdentityId]>;
        name: t.StringC;
        plan: t.IntersectionC<
          [
            t.PartialC<{
              id: t.StringC;
            }>,
            t.TypeC<{
              id: typeof Defined;
            }>,
          ]
        >;
        addons: t.ArrayC<t.StringC>;
        coupons: t.ArrayC<t.StringC>;
        wmpGrant: t.NumberC;
        level: t.NumberC;
        active: t.BooleanC;
        pointCost: typeof PointCost_.PointCost;
        description: t.StringC;
        availability: t.NumberC;
      }>,
      t.TypeC<{
        plan: typeof Defined;
        addons: typeof Defined;
        coupons: typeof Defined;
        pointCost: typeof Defined;
      }>,
    ]
  >,
  SubscriptionInstanceBrand
>;
export const SubscriptionInstance: SubscriptionInstanceC = t.brand(
  t.intersection([
    t.partial({
      id: t.union([BookingOptionsReference, Units_.IdentityId]),
      name: t.string,
      plan: t.intersection([
        t.partial({
          id: t.string,
        }),
        t.type({
          id: Defined,
        }),
      ]),
      addons: t.array(t.string),
      coupons: t.array(t.string),
      wmpGrant: t.number,
      level: t.number,
      active: t.boolean,
      pointCost: PointCost_.PointCost,
      description: t.string,
      availability: t.number,
    }),
    t.type({
      plan: Defined,
      addons: Defined,
      coupons: Defined,
      pointCost: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      id?: BookingOptionsReference | Units_.IdentityId;
      name?: string;
      plan?: {
        id?: string;
      } & {
        id: Defined;
      };
      addons?: Array<string>;
      coupons?: Array<string>;
      wmpGrant?: number;
      level?: number;
      active?: boolean;
      pointCost?: PointCost_.PointCost;
      description?: string;
      availability?: number;
    } & {
      plan: Defined;
      addons: Defined;
      coupons: Defined;
      pointCost: Defined;
    },
    SubscriptionInstanceBrand
  > => true,
  'SubscriptionInstance',
);
export interface SubscriptionInstanceBrand {
  readonly SubscriptionInstance: unique symbol;
}

// Profile
// The default export. More information at the top.
export type Profile = t.Branded<
  {
    id?: number;
    identityId?: Units_.IdentityId;
    phone?: Common_.Phone;
    email?: Common_.Email;
    firstName?: Common_.PersonalName;
    lastName?: Common_.PersonalName;
    city?: Address_.City;
    country?: Address_.Country;
    zipCode?: Address_.ZipCode;
    regionId?: string;
    region?: Region_.Region;
    profileImageUrl?: string;
    favoriteLocations?: Array<Place_.Place>;
    paymentMethod?: {
      type?: string & ('unknown' | 'card' | 'stripe');
      valid?: boolean;
      maskedNumber?: string;
      network?: string;
      issuer?: string;
      expiry?: Units_.Time;
    } & {
      type: Defined;
      valid: Defined;
    };
    subscription?: Record<string, unknown>;
    subscriptionInstance?: SubscriptionInstance;
    balances?: Array<Fare_.Fare>;
    created?: Units_.Time;
    modified?: Units_.Time;
  } & {
    identityId: Defined;
    phone: Defined;
    favoriteLocations: Defined;
    paymentMethod: Defined;
    subscriptionInstance: Defined;
    balances: Defined;
  },
  ProfileBrand
>;
export type ProfileC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        id: t.NumberC;
        identityId: typeof Units_.IdentityId;
        phone: typeof Common_.Phone;
        email: typeof Common_.Email;
        firstName: typeof Common_.PersonalName;
        lastName: typeof Common_.PersonalName;
        city: typeof Address_.City;
        country: typeof Address_.Country;
        zipCode: typeof Address_.ZipCode;
        regionId: t.StringC;
        region: typeof Region_.Region;
        profileImageUrl: t.StringC;
        favoriteLocations: t.ArrayC<typeof Place_.Place>;
        paymentMethod: t.IntersectionC<
          [
            t.PartialC<{
              type: t.IntersectionC<
                [
                  t.StringC,
                  t.UnionC<
                    [t.LiteralC<'unknown'>, t.LiteralC<'card'>, t.LiteralC<'stripe'>]
                  >,
                ]
              >;
              valid: t.BooleanC;
              maskedNumber: t.StringC;
              network: t.StringC;
              issuer: t.StringC;
              expiry: typeof Units_.Time;
            }>,
            t.TypeC<{
              type: typeof Defined;
              valid: typeof Defined;
            }>,
          ]
        >;
        subscription: t.UnknownRecordC;
        subscriptionInstance: typeof SubscriptionInstance;
        balances: t.ArrayC<typeof Fare_.Fare>;
        created: typeof Units_.Time;
        modified: typeof Units_.Time;
      }>,
      t.TypeC<{
        identityId: typeof Defined;
        phone: typeof Defined;
        favoriteLocations: typeof Defined;
        paymentMethod: typeof Defined;
        subscriptionInstance: typeof Defined;
        balances: typeof Defined;
      }>,
    ]
  >,
  ProfileBrand
>;
export const Profile: ProfileC = t.brand(
  t.intersection([
    t.partial({
      id: t.number,
      identityId: Units_.IdentityId,
      phone: Common_.Phone,
      email: Common_.Email,
      firstName: Common_.PersonalName,
      lastName: Common_.PersonalName,
      city: Address_.City,
      country: Address_.Country,
      zipCode: Address_.ZipCode,
      regionId: t.string,
      region: Region_.Region,
      profileImageUrl: t.string,
      favoriteLocations: t.array(Place_.Place),
      paymentMethod: t.intersection([
        t.partial({
          type: t.intersection([
            t.string,
            t.union([t.literal('unknown'), t.literal('card'), t.literal('stripe')]),
          ]),
          valid: t.boolean,
          maskedNumber: t.string,
          network: t.string,
          issuer: t.string,
          expiry: Units_.Time,
        }),
        t.type({
          type: Defined,
          valid: Defined,
        }),
      ]),
      subscription: t.UnknownRecord,
      subscriptionInstance: SubscriptionInstance,
      balances: t.array(Fare_.Fare),
      created: Units_.Time,
      modified: Units_.Time,
    }),
    t.type({
      identityId: Defined,
      phone: Defined,
      favoriteLocations: Defined,
      paymentMethod: Defined,
      subscriptionInstance: Defined,
      balances: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      id?: number;
      identityId?: Units_.IdentityId;
      phone?: Common_.Phone;
      email?: Common_.Email;
      firstName?: Common_.PersonalName;
      lastName?: Common_.PersonalName;
      city?: Address_.City;
      country?: Address_.Country;
      zipCode?: Address_.ZipCode;
      regionId?: string;
      region?: Region_.Region;
      profileImageUrl?: string;
      favoriteLocations?: Array<Place_.Place>;
      paymentMethod?: {
        type?: string & ('unknown' | 'card' | 'stripe');
        valid?: boolean;
        maskedNumber?: string;
        network?: string;
        issuer?: string;
        expiry?: Units_.Time;
      } & {
        type: Defined;
        valid: Defined;
      };
      subscription?: Record<string, unknown>;
      subscriptionInstance?: SubscriptionInstance;
      balances?: Array<Fare_.Fare>;
      created?: Units_.Time;
      modified?: Units_.Time;
    } & {
      identityId: Defined;
      phone: Defined;
      favoriteLocations: Defined;
      paymentMethod: Defined;
      subscriptionInstance: Defined;
      balances: Defined;
    },
    ProfileBrand
  > => true,
  'Profile',
);
export interface ProfileBrand {
  readonly Profile: unique symbol;
}

export default Profile;

// Success
