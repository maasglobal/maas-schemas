/*

undefined
MaaS stations query response schema

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';
import * as Station_ from 'maas-schemas-ts/core/components/station';

type Defined =
  | Record<string, unknown>
  | Array<unknown>
  | string
  | boolean
  | number
  | null;
const Defined = t.union([
  t.UnknownRecord,
  t.UnknownArray,
  t.string,
  t.boolean,
  t.number,
  t.null,
]);

export const schemaId = 'http://maasglobal.com/tsp/stations-retrieve/response.json';

// Default
// The default export. More information at the top.
export type Default = t.Branded<
  {
    station?: {
      id?: Station_.Id;
      code?: Station_.Code;
      name?: Station_.Name;
      location?: Station_.Location;
      agencyId?: Station_.AgencyId;
      address?: Station_.Address;
      city?: Station_.City;
      country?: Station_.Country;
      openingHours?: Station_.OpeningHours;
      facilities?: Station_.Facilities;
      timetables?: Station_.Timetables;
      zone?: Station_.Zone;
      services?: Station_.Services;
      platformCode?: Station_.PlatformCode;
    } & {
      id: Defined;
      location: Defined;
      agencyId: Defined;
    };
  },
  DefaultBrand
>;
export const Default = t.brand(
  t.partial({
    station: t.intersection([
      t.partial({
        id: Station_.Id,
        code: Station_.Code,
        name: Station_.Name,
        location: Station_.Location,
        agencyId: Station_.AgencyId,
        address: Station_.Address,
        city: Station_.City,
        country: Station_.Country,
        openingHours: Station_.OpeningHours,
        facilities: Station_.Facilities,
        timetables: Station_.Timetables,
        zone: Station_.Zone,
        services: Station_.Services,
        platformCode: Station_.PlatformCode,
      }),
      t.type({
        id: Defined,
        location: Defined,
        agencyId: Defined,
      }),
    ]),
  }),
  (
    x,
  ): x is t.Branded<
    {
      station?: {
        id?: Station_.Id;
        code?: Station_.Code;
        name?: Station_.Name;
        location?: Station_.Location;
        agencyId?: Station_.AgencyId;
        address?: Station_.Address;
        city?: Station_.City;
        country?: Station_.Country;
        openingHours?: Station_.OpeningHours;
        facilities?: Station_.Facilities;
        timetables?: Station_.Timetables;
        zone?: Station_.Zone;
        services?: Station_.Services;
        platformCode?: Station_.PlatformCode;
      } & {
        id: Defined;
        location: Defined;
        agencyId: Defined;
      };
    },
    DefaultBrand
  > => true,
  'Default',
);
export interface DefaultBrand {
  readonly Default: unique symbol;
}

export default Default;

// Success
